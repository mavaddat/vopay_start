{
  "info": {
    "_postman_id": "108f84ac-12f2-4e91-9f08-39d5e1ec07f3",
    "name": "Accounts",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Login Exceptions",
      "item": [
        {
          "name": "TC_01_login_no_credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "734f4ebd-d804-46ed-8251-adeff680f84c",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var response = pm.response.json();",
                  "",
                  "pm.test(\"Check if user provided the login credentials\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Login. Please provide the required parameters\");",
                  "    pm.response.to.have.header('Content-Type');",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "22390456-bc13-4b9c-b5b2-2de4d20f7117",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": "{{url}}api/v2/account/balance",
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nKey {required}\nSignature {required}"
          },
          "response": []
        },
        {
          "name": "TC_02_passed_in_only_account_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "75a6610a-c601-44d8-a6d0-df7e70211a4f",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided the key and signature\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Login. Please provide the required parameters\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "1e1b517f-523b-497b-a88f-3ddd4f57d91d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "balance"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nSignature {required}"
          },
          "response": []
        },
        {
          "name": "TC_03_passed_in_only_api_key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27352643-c975-4701-9959-65d5bbb5c985",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided the account id and signature\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Login. Please provide the required parameters\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "aaa24447-694c-46d1-8368-6be57cb3ae3d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/transactions?Key={{accountapikey}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "transactions"
              ],
              "query": [
                {
                  "key": "Key",
                  "value": "{{accountapikey}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}"
          },
          "response": []
        },
        {
          "name": "TC_04_passed_in_only_api_signature",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0642a7ef-da2d-46be-9f1d-ac6a8a4ca9fc",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided the account id and signature\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Login. Please provide the required parameters\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "cc2bea36-89f6-4a24-a5dd-1aac7f8a02b6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/transactions?Signature={{accountapisig}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "transactions"
              ],
              "query": [
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nSignature {required}"
          },
          "response": []
        },
        {
          "name": "TC_05_passed_in_only_api_key_and_signature",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fb6dbb7e-397a-4187-87a3-6c92ebec8a87",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided an account id\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "     pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Login. Please provide the required parameters\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0cf2ab6f-a502-4591-86ed-6a3a4705527f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/transactions?Key={{accountapikey}}&Signature={{accountapisig}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "transactions"
              ],
              "query": [
                {
                  "key": "Key",
                  "value": "{{accountapikey}}"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nKey {required}\nSignature {required}"
          },
          "response": []
        },
        {
          "name": "TC_06_passed_in_only_accountid_and_signature",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36b34393-ac9f-4b7a-96cb-21fd7b8e5c5c",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided the api key\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Login. Please provide the required parameters\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f64dbf8b-3e22-4998-97b9-f4dae4ea5fb9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/transactions?AccountID={{accountid}}&Signature={{accountapisig}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "transactions"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nSignature {required}"
          },
          "response": []
        },
        {
          "name": "TC_07_passed_in_only_accountid_and_key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22d98265-946f-4b5c-90d0-5b635541cefb",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided the api sig\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Login. Please provide the required parameters\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "25cb80a4-6312-432f-a089-82d437d85c16",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/transactions?AccountID={{accountid}}&Key={{accountapikey}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "transactions"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}"
          },
          "response": []
        },
        {
          "name": "TC_09_login_success",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fda285a9-b2a4-4d1e-82f6-38537d4dffc5",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"API returns account balances successfully\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(true);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "54b03fc3-2773-4874-b015-b1283bbf3d59",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "balance"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}"
          },
          "response": []
        },
        {
          "name": "TC_10_passed_in_invalid_key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "223ee059-fd6a-4996-bc14-3038759c59c9",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided an invalid key\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid key and signature combination\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e91d04c4-9aee-4f4f-a5d5-400ea8010184",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{$randomLoremWords}}&Signature={{accountapisig}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "balance"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}"
                },
                {
                  "key": "Key",
                  "value": "{{$randomLoremWords}}"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}"
          },
          "response": []
        },
        {
          "name": "TC_11_passed_in_invalid_signature",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1227936-1320-4483-b680-dd3c8a5c9f17",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided an invalid key\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid key and signature combination\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "9344f86c-c45d-4622-a342-5535b9f9f3ae",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{$randomWords}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "balance"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}"
                },
                {
                  "key": "Signature",
                  "value": "{{$randomWords}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}"
          },
          "response": []
        },
        {
          "name": "TC_12_passed_in_invalid_accountid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dff44402-8c38-4cc4-98d3-80e0aba4e9bf",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check if user provided an invalid account id\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"This User is invalid or inactive. Please try again\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "425b6c9d-b97a-49d4-a11a-46e050dfd695",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/balance?AccountID={{$randomWords}}&Key={{accountapikey}}&Signature={{accountapisig}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "balance"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{$randomWords}}"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}"
                }
              ]
            },
            "description": "If login credentials are not provided, it throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}"
          },
          "response": []
        },
        {
          "name": "TC_13_passed_in_portal_user_as_account_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396bb163-c705-4378-9115-f39f02a00303",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"This User is invalid or inactive. Please try again\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(false);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"This User is invalid or inactive. Please try again\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f42d1543-400f-4fbb-9f95-f2b385f25563",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "62bdbd13-ce0f-447c-b8f2-911be27251ed",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{emailaccountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/eft/fund",
            "description": "Verify that an error message returns when we try to use as an Accountid an email from the portal, and therefore the account is invalid or inactive."
          },
          "response": []
        }
      ],
      "id": "4e6d03c3-cfb3-4ad6-bd79-dbb79786a7cb",
      "description": "These request consists of all login exceptions across all the endpoints.\n\nExceptions are as follows:\n- Invalid AccountID\n- Invalid Key\n- Invalid Signature"
    },
    {
      "name": "Accounts",
      "item": [
        {
          "name": "GET account/balance",
          "item": [
            {
              "name": "TC_01_balance_fix_balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1b58de7-ac0b-41d5-924b-888b132b670e",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that account balances returns successful\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "});",
                      "",
                      "pm.test(\"Verify the ErrorMessage\", function() {",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    ",
                      "    // Calculating the Account Balance - new formula",
                      "    var AccountBalance = parseFloat(jsonData.AccountBalance);",
                      "    var PendingFunds = parseFloat(jsonData.PendingFunds);",
                      "    var SecurityDeposit = parseFloat(jsonData.SecurityDeposit);",
                      "    var AvailableImmediately = parseFloat(jsonData.AvailableImmediately);",
                      "    ",
                      "    var TotalAvailableFunds = (AccountBalance - Math.max(PendingFunds - AvailableImmediately, 0) - SecurityDeposit);",
                      "    TotalAvailableFunds = TotalAvailableFunds.toFixed(2);",
                      "    pm.expect(jsonData.AvailableFunds).is.to.equal(TotalAvailableFunds);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "e3a3b19b-d7a9-41d0-830e-846364b648b2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": {
                  "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Currency={{currency_cad}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "balance"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Currency",
                      "value": "{{currency_cad}}"
                    }
                  ]
                },
                "description": "Verify that this method returns the details of the current account balance and available funds."
              },
              "response": []
            },
            {
              "name": "TC_02_passed_in_no_currency",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cd8212b-86c8-4128-a81c-cf757eebdd93",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that account balances returns successfully if currency is not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "255de920-c3c5-4384-869f-cca9e95dd4b0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": {
                  "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "balance"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    }
                  ]
                },
                "description": "Verify that this method returns the details of the current account balance and available funds"
              },
              "response": []
            },
            {
              "name": "TC_03_passed_in_cad_currency",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b91884-a1aa-411c-ad08-2e20b2c9e1b9",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that account balances returns successful if currency is provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.Currency).is.to.equal(\"CAD\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "63476112-6f21-4f91-8fd5-706d207db619",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": {
                  "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Currency={{currency_cad}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "balance"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Currency",
                      "value": "{{currency_cad}}"
                    }
                  ]
                },
                "description": "Verify that this method returns the details of the current account balance and available funds."
              },
              "response": [
                {
                  "id": "c79c6860-c7d4-4143-bda2-6db6fdd1b7a6",
                  "name": "TC_03_passed_in_cad_currency",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/x-www-form-urlencoded"
                      }
                    ],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": []
                    },
                    "url": {
                      "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Currency={{currency_cad}}",
                      "host": [
                        "{{url}}api"
                      ],
                      "path": [
                        "v2",
                        "account",
                        "balance"
                      ],
                      "query": [
                        {
                          "key": "AccountID",
                          "value": "{{accountid}}"
                        },
                        {
                          "key": "Key",
                          "value": "{{accountapikey}}"
                        },
                        {
                          "key": "Signature",
                          "value": "{{accountapisig}}"
                        },
                        {
                          "key": "Currency",
                          "value": "{{currency_cad}}"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "html",
                  "header": [
                    {
                      "key": "Date",
                      "value": "Fri, 14 Jan 2022 21:50:08 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Apache/2.4.41 (Ubuntu)"
                    },
                    {
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "key": "Content-Length",
                      "value": "171"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5, max=100"
                    },
                    {
                      "key": "Connection",
                      "value": "Keep-Alive"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/html; charset=UTF-8"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\"Success\":true,\"ErrorMessage\":\"\",\"AccountBalance\":\"1628277857.94\",\"PendingFunds\":\"6798.89\",\"SecurityDeposit\":\"1000.00\",\"AvailableImmediately\":\"1000.00\",\"AvailableFunds\":\"1628271059.05\",\"Currency\":\"CAD\"}"
                }
              ]
            },
            {
              "name": "TC_04_passed_in_currency_with_alphanumeric",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1cd96e2-175d-4193-82f8-30c30aeaf04a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"API will not return any balances if currency provided is having special characters\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): Currency (Does not exists in our records)\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "019b77e5-131e-4e5e-86f1-5675b1962f1f",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "607b53c1-16ad-4e36-a848-5e1330799a11",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": {
                  "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Currency={{$randomAlphaNumeric}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "balance"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Currency",
                      "value": "{{$randomAlphaNumeric}}"
                    }
                  ]
                },
                "description": "Verify that this method returns the details of the current account balance and available funds."
              },
              "response": []
            },
            {
              "name": "TC_05_passed_in_usd_currency",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa573036-dab3-4816-8e1e-54ea1f303d4d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify result with other than local currency\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                      "    pm.expect(jsonData.Currency).is.to.equal(\"USD\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "9900cf3e-c156-425d-a75c-c6f41f287274",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/balance?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Currency={{currency_usd}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "balance"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Currency",
                      "value": "{{currency_usd}}"
                    }
                  ]
                },
                "description": "To verify the result when other than local currency is provided."
              },
              "response": []
            }
          ],
          "id": "04d54c3d-a787-4168-8bc0-9492d20c50c6",
          "description": "Test cases for account/balance"
        },
        {
          "name": "GET account/transactions",
          "item": [
            {
              "name": "TC_01_start_end_date_not_provided",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01e68e85-8dfb-49e7-a4f6-2fe8e07b9c9a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check if user provided StartDateTime, EndDateTime\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: StartDateTime, EndDateTime\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "c5508198-d529-4e4d-8263-3a4385348b95",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/transactions?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    }
                  ]
                },
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_02_passed_in_start_end_date_returns_no_number_of_records",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3812bca8-d50f-4a92-a5e9-c5166a3dfec9",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that no transaction returns for a specified date\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.NumberOfRecords).is.to.equal(0);",
                      "    pm.expect(jsonData.Transactions).to.deep.equal({});",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "db6641fe-398d-4262-a383-5e559277cf2e",
                    "exec": [
                      "var startDate = pm.variables.replaceIn('{{$randomDatePast}}');\r",
                      "var endDate = pm.variables.replaceIn('{{$randomDateFuture}}');\r",
                      "\r",
                      "console.log(startDate);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "30c78ecd-49d7-4bcd-b7c7-c87e59bfd04b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/transactions?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&StartDateTime={{$startDate}}&EndDateTime={{$endDate}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "StartDateTime",
                      "value": "{{$startDate}}"
                    },
                    {
                      "key": "EndDateTime",
                      "value": "{{$endDate}}"
                    }
                  ]
                },
                "description": "This method returns the list of all the transaction that can affect the account balance. In addition, customer funding transactions, customer withdrawal transactions and fees returned by this API. Also, this endpoint only returns basic information on the transactions.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}\nCurrency {optional}\nStartDateTime {required}\nEndDateTime {required}"
              },
              "response": []
            },
            {
              "name": "TC_03_check_transaction_id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b7cdab1-b2f2-49b7-a837-ea6fe0291660",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "var moment = require('moment');",
                      "pm.environment.set(\"startdatetime\", moment().format(\"YYYY-MM-DD\"));",
                      "",
                      "var EndDate = moment().add(1, 'day').format(\"YYYY-MM-DD\");",
                      "pm.environment.set(\"enddatetime\", EndDate);",
                      "",
                      "pm.test(\"Verify that transaction detail is returned\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    //pm.expect(jsonData.NumberOfRecords).is.to.equal(1);",
                      "    //pm.expect(pm.environment.has('transaction_id')).to.equal(true);",
                      "    // pm.expect(jsonData.Transactions[0].TransactionType).is.to.equal(\"EFT Funding\");",
                      "    // pm.expect(jsonData.Transactions[0].TransactionStatus).is.to.equal(\"pending\");",
                      "    // pm.expect(jsonData.Transactions[0].Notes).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].DebitAmount).is.to.equal('0.00');",
                      "    // pm.expect(jsonData.Transactions[0].CreditAmount).is.to.equal('10.00');",
                      "    // pm.expect(jsonData.Transactions[0].Currency).is.to.equal(\"CAD\");",
                      "    // pm.expect(jsonData.Transactions[0].HoldAmount).is.to.equal('10.00');",
                      "    // pm.expect(jsonData.Transactions[0].HoldAmount).is.to.equal('10.00');",
                      "    // pm.expect(moment(jsonData.Transactions[0].LastModified, 'YYYY-MM-DD hh:mm:ss', false).isValid()).is.true;",
                      "    // pm.expect(jsonData.Transactions[0].ParentTransactionID).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].ChildTransactionIDs).to.deep.equal({});",
                      "    // pm.expect(jsonData.Transactions[0].ClientReferenceNumber).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].ScheduledTransactionID).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].PayLinkDetails).to.deep.equal({});",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6136eb2f-12fa-41fd-8bce-53cd18acff7e",
                    "exec": [
                      "var env_url = pm.environment.get(\"url\");\r",
                      "var account_id = pm.environment.get(\"accountid\");\r",
                      "var api_key = pm.environment.get(\"accountapikey\");\r",
                      "var signature = pm.environment.get(\"accountapisig\");\r",
                      "\r",
                      "var moment = require('moment');\r",
                      "var startdatetime = moment().add(1, 'day').format(\"YYYY-MM-DD\");\r",
                      "pm.environment.set(\"startdatetime\", startdatetime);\r",
                      "\r",
                      "var enddatetime = moment().add(3, 'day').format(\"YYYY-MM-DD\");\r",
                      "pm.environment.set(\"enddatetime\", enddatetime);\r",
                      "\r",
                      "pm.variables.set('_firstName',$randomFirstName);\r",
                      "pm.variables.set('_lastName',$randomLastName);\r",
                      "pm.variables.set('_phone',$randomLastName);\r",
                      "pm.variables.set('_address',$randomLastName);\r",
                      "pm.variables.set('_city',$randomLastName);\r",
                      "pm.variables.set('_province',$randomLastName);\r",
                      "pm.variables.set('_amount',$randomLastName);\r",
                      "pm.variables.set\r",
                      "pm.sendRequest({\r",
                      "    url:  env_url + \"api/v2/eft/fund?AccountID=\" + account_id + \" &Key=\" + api_key +\"&Signature=\" + signature+ `&FirstName=${pm.variables.get('_firstName')}&LastName=${pm.variables.get('_lastName')}&PhoneNumber=${pm.variables.get('_phone')}&Address1=${pm.variables.get('_address')}&City=${pm.variables.get('_city')}&Province=${pm.variables.get('_province')}&Country=Canada&PostalCode=${pm.variables.get('_postalCode')}&DelayBankingInfo=1&Amount=${pm.variables.get('_amount')}&Currency=CAD`,\r",
                      "    method: \"POST\",\r",
                      "    headers: {},\r",
                      "    body: {},\r",
                      "},\r",
                      " function (err, res) {\r",
                      "    pm.environment.set(\"transaction_id\", res.json().TransactionID);\r",
                      " }\r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "9f7a35b5-6c73-441e-84f8-eabceeb64f1c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/transactions?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&StartDateTime={{startdatetime}}&EndDateTime={{enddatetime}}&Currency={{currency_cad}}&TransactionID={{transaction_id}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "StartDateTime",
                      "value": "{{startdatetime}}"
                    },
                    {
                      "key": "EndDateTime",
                      "value": "{{enddatetime}}"
                    },
                    {
                      "key": "Currency",
                      "value": "{{currency_cad}}"
                    },
                    {
                      "key": "TransactionID",
                      "value": "{{transaction_id}}"
                    }
                  ]
                },
                "description": "This method returns the list of all the transaction that can affect the account balance. In addition, customer funding transactions, customer withdrawal transactions and fees returned by this API. Also, this endpoint only returns basic information on the transactions.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}\nCurrency {optional}\nStartDateTime {required}\nEndDateTime {required}"
              },
              "response": []
            },
            {
              "name": "TC_04_check_date_span",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b7cdab1-b2f2-49b7-a837-ea6fe0291660",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "var moment = require('moment');",
                      "pm.environment.set(\"startdatetime\", moment().format(\"YYYY-MM-DD\"));",
                      "",
                      "var EndDate = moment().add(1, 'day').format(\"YYYY-MM-DD\");",
                      "pm.environment.set(\"enddatetime\", EndDate);",
                      "",
                      "pm.test(\"Verify that transaction detail is returned\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    //pm.expect(jsonData.NumberOfRecords).is.to.equal(1);",
                      "    //pm.expect(pm.environment.has('transaction_id')).to.equal(true);",
                      "    // pm.expect(jsonData.Transactions[0].TransactionType).is.to.equal(\"EFT Funding\");",
                      "    // pm.expect(jsonData.Transactions[0].TransactionStatus).is.to.equal(\"pending\");",
                      "    // pm.expect(jsonData.Transactions[0].Notes).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].DebitAmount).is.to.equal('0.00');",
                      "    // pm.expect(jsonData.Transactions[0].CreditAmount).is.to.equal('10.00');",
                      "    // pm.expect(jsonData.Transactions[0].Currency).is.to.equal(\"CAD\");",
                      "    // pm.expect(jsonData.Transactions[0].HoldAmount).is.to.equal('10.00');",
                      "    // pm.expect(jsonData.Transactions[0].HoldAmount).is.to.equal('10.00');",
                      "    // pm.expect(moment(jsonData.Transactions[0].LastModified, 'YYYY-MM-DD hh:mm:ss', false).isValid()).is.true;",
                      "    // pm.expect(jsonData.Transactions[0].ParentTransactionID).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].ChildTransactionIDs).to.deep.equal({});",
                      "    // pm.expect(jsonData.Transactions[0].ClientReferenceNumber).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].ScheduledTransactionID).is.to.equal(\"\");",
                      "    // pm.expect(jsonData.Transactions[0].PayLinkDetails).to.deep.equal({});",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6136eb2f-12fa-41fd-8bce-53cd18acff7e",
                    "exec": [
                      "var env_url = pm.environment.get(\"url\");\r",
                      "var account_id = pm.environment.get(\"accountid\");\r",
                      "var api_key = pm.environment.get(\"accountapikey\");\r",
                      "var signature = pm.environment.get(\"accountapisig\");\r",
                      "\r",
                      "var moment = require('moment');\r",
                      "var startdatetime = moment().add(1, 'day').format(\"YYYY-MM-DD\");\r",
                      "pm.environment.set(\"startdatetime\", startdatetime);\r",
                      "\r",
                      "var enddatetime = moment().add(3, 'day').format(\"YYYY-MM-DD\");\r",
                      "pm.environment.set(\"enddatetime\", enddatetime);\r",
                      " \r",
                      "pm.sendRequest({\r",
                      "    url:  env_url + \"api/v2/eft/fund?AccountID=\" + account_id + \" &Key=\" + api_key +\"&Signature=\" + signature+ \"&FirstName=John&LastName=Doe&PhoneNumber=6041235678&Address1=123 Vanness Ave&City=Vancouver&Province=BC&Country=Canada&PostalCode=V6Z1J1&DelayBankingInfo=1&Amount=10&Currency=CAD\",\r",
                      "    method: \"POST\",\r",
                      "    headers: {},\r",
                      "    body: {},\r",
                      "},\r",
                      " function (err, res) {\r",
                      "    pm.environment.set(\"transaction_id\", res.json().TransactionID);\r",
                      " }\r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "2896255d-97c1-432b-8149-e50148d8d8d5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/transactions?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&StartDateTime={{startdatetime}}&EndDateTime={{enddatetime}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "StartDateTime",
                      "value": "{{startdatetime}}"
                    },
                    {
                      "key": "EndDateTime",
                      "value": "{{enddatetime}}"
                    }
                  ]
                },
                "description": "This method returns the list of all the transaction that can affect the account balance. In addition, customer funding transactions, customer withdrawal transactions and fees returned by this API. Also, this endpoint only returns basic information on the transactions.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}\nCurrency {optional}\nStartDateTime {required}\nEndDateTime {required}"
              },
              "response": []
            }
          ],
          "id": "00b95be4-44ef-49bd-9242-fc6ae581b1ea"
        },
        {
          "name": "POST account/transactions/cancel",
          "item": [
            {
              "name": "TC_01_cancel_the_transaction",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44f71b0f-b7c5-4077-a41f-6fb0459a4f15",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction is cancelled\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.TransactionID).to.eql(pm.environment.get('transaction_id'))",
                      "    pm.expect(jsonData.TransactionStatus).is.to.equal(\"cancelled\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa5df9ae-26f2-4cd6-93d2-92294a042e50",
                    "exec": [
                      "const env_url = pm.environment.get(\"url\");\r",
                      "const account_id = pm.environment.get(\"accountid\");\r",
                      "const api_key = pm.environment.get(\"accountapikey\");\r",
                      "const signature = pm.environment.get(\"accountapisig\");\r",
                      "const endpoint_uri = env_url + \"api/v2/eft/fund?AccountID=\" + account_id + \"&Key=\" + api_key +\"&Signature=\" + signature+ `&FirstName=${pm.variables.replaceIn('{{$randomFirstName}}')}&LastName=${pm.variables.replaceIn('{{$randomLastName}}')}&PhoneNumber=${pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(/-/g,'')}&Address1=${pm.variables.replaceIn('{{$randomStreetAddress}}')}&City=${pm.variables.replaceIn('{{$randomCity}}')}&Province=${pm.environment.get(\"province\")}&Country=Canada&PostalCode=V6Z1J1&DelayBankingInfo=1&Amount=${(Math.random()*1000+10).toFixed(2)}&Currency=CAD`;\r",
                      "console.log(endpoint_uri);\r",
                      "\r",
                      "pm.sendRequest({\r",
                      "    url:  endpoint_uri,\r",
                      "    method: \"POST\",\r",
                      "    headers: {},\r",
                      "    body: {},\r",
                      "},\r",
                      " function (err, res) {\r",
                      "     if(!err){\r",
                      "         console.log(res);\r",
                      "        pm.environment.set(\"transaction_id\", res.json().TransactionID);\r",
                      "     }\r",
                      " }\r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "c8b131a9-fa10-417b-bcca-8c0efde79260",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "TransactionID",
                      "value": "{{transaction_id}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transactions/cancel",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            }
          ],
          "id": "5c91e520-6d3e-42fa-906e-8b847987e3e2"
        },
        {
          "name": "POST account/webhook-url",
          "item": [
            {
              "name": "GET account/webhook-url/info",
              "item": [
                {
                  "name": "TC_01_passed_in_login_to_get_webhookurl",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "df312bac-e78c-408c-8a5d-87335761f4e1",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "pm.test(\"Check that the webhook-url is created\", function() {",
                          "    pm.expect(jsonData.Success).is.to.equal(true);",
                          "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "9f5c2141-2dc3-40d1-80f1-f7c4e975979c",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "44e06ae5-16d8-4a5c-8c73-ad32345f577f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": []
                    },
                    "url": {
                      "raw": "{{url}}api/v2/account/webhook-url/info?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
                      "host": [
                        "{{url}}api"
                      ],
                      "path": [
                        "v2",
                        "account",
                        "webhook-url",
                        "info"
                      ],
                      "query": [
                        {
                          "key": "AccountID",
                          "value": "{{accountid}}"
                        },
                        {
                          "key": "Key",
                          "value": "{{accountapikey}}"
                        },
                        {
                          "key": "Signature",
                          "value": "{{accountapisig}}"
                        }
                      ]
                    },
                    "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
                  },
                  "response": []
                }
              ],
              "id": "1bb3b041-5d5c-42b5-a045-f85fc372a180"
            },
            {
              "name": "GET account/webhook-url/test",
              "item": [
                {
                  "name": "TC_01_test_webhook_site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3d4943e8-b0ef-40bb-9a2b-94cf6a3aa94c",
                        "exec": [
                          "/** ",
                          " * Synchronously do:",
                          " *  1) Query webhook.site for the content of our payload, then",
                          " *  2) Calculate a local hmac for comparing the ValidationID, then",
                          " *  3) Deallocate the webhook receiver",
                          " * ",
                          " * The above tasks are originally asynchronous (may happen in any order), ",
                          " * so we need to force them to be sequential.",
                          " * ",
                          " * That is the motivation for asynchSeries from ",
                          " * https://community.postman.com/t/async-operations/24314",
                          " * the utils object is used to pass the helper functions from pre-req script",
                          "*/",
                          "",
                          "const pmWebhookTestRes = JSON.parse(responseBody);",
                          "pm.test(\"Check that the webhook-test is sent\", function() {",
                          "    pm.expect(pmWebhookTestRes.Success).is.to.equal(true);",
                          "    pm.expect(pmWebhookTestRes.ErrorMessage).is.to.equal(\"\");",
                          "});",
                          "",
                          "const uuid = pm.globals.get(\"webhookuuid\");",
                          "var options = {",
                          "    \"getLatestContent\": {",
                          "            method: 'GET',",
                          "            url: `https://webhook.site/token/${uuid}/request/latest`",
                          "        },",
                          "    \"deleteWebhookReceiver\": {",
                          "            method: 'DELETE',",
                          "            url: 'https://webhook.site/token/' + uuid",
                          "        }",
                          "}",
                          "// asyncSeries is defined in the pre-request script",
                          "utils.asyncSeries([",
                          "    (cb) => pm.sendRequest(options.getLatestContent, (err, res) => {",
                          "        const buffer = Buffer.from(res.stream, 'utf8');",
                          "        const body = buffer.toString();",
                          "        const json = JSON.parse(body); // response from webhook.site API (contains our payload as a field)",
                          "        // pm.test(\"Got latest response from webhook\",() => {",
                          "            pm.expect(json).to.have.property('content');",
                          "        // });",
                          "        const latest = json.content; // content is our payload (set by VoPay in webhook-test POST)",
                          "        const found = JSON.parse(latest); // the parsed payload",
                          "        if(pm.in_aws() !== true) { console.log(found);}",
                          "        pm.test(\"Check that the webhook-test was able to post JSON to receiver\", function() {",
                          "            pm.expect(found).to.have.property('Success');",
                          "            pm.expect(found.Success).is.to.equal(true);",
                          "        });",
                          "        // pm.test(\"Expected payload validation fields present\", function(){",
                          "            pm.expect(found).to.have.property('TransactionID');",
                          "            pm.expect(found).to.have.property('ValidationKey');",
                          "        // });",
                          "        // check the ValidationKey",
                          "        // ValidationKey is a combination of API shared secret key and the transaction ID codified by HMAC SHA1",
                          "        if(pm.in_aws() !== true) { console.log(`remoteHmacSig: ${found.ValidationKey}`); }",
                          "        const hmacSig = CryptoJS.SHA1(`${pm.environment.get(\"accountsharedsecret\")}${found.TransactionID}`).toString();",
                          "        if(pm.in_aws() !== true) { console.log(`localHmacSig: ${hmacSig}`); }",
                          "        pm.test(\"Locally computed SHA1 HMAC matches remote ValidationKey\", function(){",
                          "            pm.expect(hmacSig).is.to.equal(found.ValidationKey);",
                          "        });",
                          "        cb(err, res);",
                          "    }),",
                          "    (cb) => pm.sendRequest(options.deleteWebhookReceiver, (err, res) => {",
                          "        //de-allocates the webhook receiver",
                          "        if(pm.in_aws() !== true) { console.log(`Webhook ${uuid} deleted`); }",
                          "        cb(err, res);",
                          "    })",
                          "], (err, res) => { // this callback applies to the entire array of synchronous jobs",
                          "    //pm.test(\"Response codes safe, deallocate webhook receiver\",() => {",
                          "        pm.expect(err).to.equal(null);",
                          "        res.forEach( ",
                          "                (resea) => {",
                          "                        pm.expect(resea).to.have.property('code');",
                          "                        pm.expect(resea.code).to.be.oneOf([200,201,202,203,204]);",
                          "                    } ",
                          "            );",
                          "    //});",
                          "    if(pm.in_aws() !== true) { console.log('Series operations resolved', err, res); }",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ae200ae9-dd6e-49ea-96be-a0d926ef4a27",
                        "exec": [
                          "/** \r",
                          " * Synchronously do:\r",
                          " *  1) Get a webhook receiver from the webhook.site API (no auth needed), then\r",
                          " *  2) Ask webhook-url/test to POST data to the webhook receiver\r",
                          " * \r",
                          " * The above tasks are originally asynchronous (may happen in any order), \r",
                          " * so we need to force them to be sequential.\r",
                          " * \r",
                          " * That is the motivation for asynchSeries from \r",
                          " * https://community.postman.com/t/async-operations/24314\r",
                          " * Lines 11-54 simply set up (and export) _series, asyncSeries helper functions.\r",
                          "*/\r",
                          "\r",
                          "/**\r",
                          " * @private\r",
                          " * @description Internal function to run tasks in series\r",
                          " * \r",
                          " * @param {Array<Function>} tasks\r",
                          " * @param {Function} cb\r",
                          " * @param {Number} currOperation\r",
                          " * @param {Array<Any>} results\r",
                          " */\r",
                          "function _series (tasks, cb, currOperation = 0, results = []) {\r",
                          "    // Bail-out condition\r",
                          "    if (currOperation === tasks.length) {\r",
                          "        return cb(null, results);\r",
                          "    }\r",
                          "\r",
                          "    if (typeof tasks[currOperation] !== 'function') {\r",
                          "        return cb(new Error('asyncSeries: Please provide a function'));\r",
                          "    }\r",
                          "\r",
                          "    tasks[currOperation]((err, res) => {\r",
                          "        if (err) {\r",
                          "            return cb(err);\r",
                          "        }\r",
                          "\r",
                          "        results.push(res);\r",
                          "\r",
                          "        // Recursively call the next task in series till we're done executing all the operations\r",
                          "        return _series(tasks, cb, currOperation + 1, results);\r",
                          "    });\r",
                          "}\r",
                          "\r",
                          "/**\r",
                          " * @description asyncSeries to execute requests in a series format\r",
                          " * \r",
                          " * @param {Array<Function>} tasks\r",
                          " * @param {Function} cb\r",
                          " */\r",
                          "function asyncSeries (tasks, cb = () => {}) {\r",
                          "    return _series(tasks, cb);\r",
                          "}\r",
                          "\r",
                          "utils = {\r",
                          "    asyncSeries: asyncSeries // make asyncSeries available in Tests\r",
                          "};\r",
                          "\r",
                          "// get assigned webhook from the value of the UUID in the response body\r",
                          "var env_url = pm.environment.get(\"url\");\r",
                          "var account_id = pm.environment.get(\"accountid\");\r",
                          "var api_key = pm.environment.get(\"accountapikey\");\r",
                          "var signature = pm.environment.get(\"accountapisig\");\r",
                          "const endpoint = \"api/v2/account/webhook-url\";\r",
                          "// Request webhook by POST at 'webhook.site/token' ContentType=\"application/json\"; Accept=\"application/json\"\r",
                          "const options = {\r",
                          "    \"getWebhookToken\":{\r",
                          "        method: 'POST',\r",
                          "        url: 'https://webhook.site/token',\r",
                          "        headers: {\r",
                          "            'Content-Type': 'application/json',\r",
                          "            'Accept': 'application/json'\r",
                          "        }\r",
                          "    },\r",
                          "    \"postWebhookUrl\":{\r",
                          "        method: 'POST',\r",
                          "        url: `${env_url}${endpoint}?AccountID=${account_id}&Key=${api_key}&Signature=${signature}&WebHookUrl=`\r",
                          "    }\r",
                          "};\r",
                          "asyncSeries([\r",
                          "    (cb) => pm.sendRequest(options.getWebhookToken, (err, res) => {\r",
                          "        // Get a webhook receiver from webhook.site\r",
                          "        const buffer = Buffer.from(res.stream, 'utf8');\r",
                          "        const body = buffer.toString();\r",
                          "        const json = JSON.parse(body);\r",
                          "        pm.globals.set(\"webhookuuid\",json.uuid);\r",
                          "        const WEBHOOK_URI = `https://webhook.site/${json.uuid}`;\r",
                          "        options.postWebhookUrl.url += WEBHOOK_URI;\r",
                          "        console.log(`uuid: ${json.uuid}`);\r",
                          "        cb(err, res);\r",
                          "    }),\r",
                          "    (cb) => pm.sendRequest(options.postWebhookUrl, (err, res) => {\r",
                          "        // Ask webhook-url/test to POST data to the webhook receiver\r",
                          "        const buffer = Buffer.from(res.stream, 'utf8');\r",
                          "        const body = buffer.toString();\r",
                          "        const json = JSON.parse(body);\r",
                          "        console.log(json);\r",
                          "        cb(err, res);\r",
                          "    })\r",
                          "], (err, res) => {\r",
                          "    pm.test(\"Get and post webhook URL\",() => {\r",
                          "        pm.expect(err).to.equal(null);\r",
                          "        res.forEach( \r",
                          "                (resea) => {\r",
                          "                        pm.expect(resea).to.have.property('code');\r",
                          "                        pm.expect(resea.code).to.be.oneOf([200,201,202,203,204]);\r",
                          "                    } \r",
                          "            );\r",
                          "    });\r",
                          "    console.log('Series operations resolved', err, res);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "7a44ac6f-8fe5-4728-b593-195393e6907f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": []
                    },
                    "url": {
                      "raw": "{{url}}api/v2/account/webhook-url/test?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
                      "host": [
                        "{{url}}api"
                      ],
                      "path": [
                        "v2",
                        "account",
                        "webhook-url",
                        "test"
                      ],
                      "query": [
                        {
                          "key": "AccountID",
                          "value": "{{accountid}}"
                        },
                        {
                          "key": "Key",
                          "value": "{{accountapikey}}"
                        },
                        {
                          "key": "Signature",
                          "value": "{{accountapisig}}"
                        }
                      ]
                    },
                    "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
                  },
                  "response": []
                }
              ],
              "id": "081937a0-0bbe-43ca-9508-455c1d962e5f"
            },
            {
              "name": "TC_01_passed_in_webhook_disabled_false",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdb2f40-53f7-4cde-a3f5-28dfcf89a07e",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that WebHookUrl is required\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: WebHookUrl\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0b88f6b9-6fb9-4f57-ac81-0d5dd4fdda2a",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "92ad4b64-1793-48b2-842d-bb8ed5f50d85",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Disabled",
                      "value": "false",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/webhook-url",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_02_passed_in_webhook_disabled_true",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a9a74133-bfc6-4ae1-a591-a76f1ad30d0c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the webhook-url is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "421867b4-458a-46c6-a8ea-0b22efbaf18c",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "473fd485-80ca-4dc3-a723-09f32969c780",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Disabled",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/webhook-url",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_03_passed_in_webhookurl",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b11c7936-2607-42ba-a2c0-8edf3eebfed6",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the webhook-url is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "336cf2f6-1090-448b-956f-04990867df98",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "5a47ad72-09c2-4ea1-8e78-51ee9e31509d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "WebHookUrl",
                      "value": "https://webhook.site/afec5fb4-6050-451f-855e-1c7ee1936ede",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/webhook-url",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            }
          ],
          "id": "4db4f402-6647-43a9-86d1-b47e3a1ae47c"
        },
        {
          "name": "POST account/transfer-to",
          "item": [
            {
              "name": "TC_01_transfer_funds_to_recipient_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "754dd49c-8f66-4e53-ba9f-131098b87344",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that it is not possible to do a transfer to an account that has Client Accounts\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"It is not possible to do a transfer to an account that has Client Accounts. Inform a RecipientClientAccountID instead.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ae3f595e-c202-44a4-91e0-815f5d3bbbef",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "c315a334-8d16-40ed-8d3a-7fd9c01660c8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{subaccountid_account_active}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_02_recipient_account_id_not_provided",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1eb11cb-e82b-420b-83f0-43cfd70f7ea7",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that either RecipientAccountID or RecipientClientAccountID must be provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"You should inform either RecipientAccountID or RecipientClientAccountID.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d8d61779-a955-4268-89e9-b085cccd03d7",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "25a4017c-7fef-4ca6-a467-66ed5be7506f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_03_transfer_funds_to_recipient_account_passed_in_idempotencykey",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e0cc7a4-28dc-4ca9-ace1-14dff82aae04",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction id is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b81dc340-07ce-4b6c-8a0c-2c791fed3bdc",
                    "exec": [
                      "var random_amount = _.random(1, 10) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);\r",
                      "\r",
                      "// Set the randomName of the IdempotencyKey\r",
                      "var num = Math.floor(Math.random() * 1000000001);\r",
                      "pm.environment.set(\"idempotencykey\", \"AccountTransfer\" + num);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "4665564e-4ed0-453f-96aa-102ada933407",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{recipientaccount_id}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_04_transfer_funds_to_recipient_account_passed_in_same_idempotencykey",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3450567-8379-4979-9bc8-18c2f33eb60f",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the idempotencykey already exists\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"A transaction with a matching idempotency key already exists. Please update this parameter and try again.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b04abdd3-94f4-4312-8ae7-4651c1fcf8d7",
                    "exec": [
                      "var random_amount = _.random(1, 30) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "59925409-bd3f-4476-af3d-cb87d85641ff",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{recipientaccount_id}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_05_transfer_funds_to_recipient_account_passed_in_special_char_idempotencykey",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbc4fbda-c437-4844-9411-a35e86cb3e46",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that IdempotencyKey has special characters\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): IdempotencyKey (Input includes invalid characters.)\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fe034dca-1457-4a40-914c-0a55d5142280",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "22c81a18-f661-4108-a660-501cf5a008d2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{recipientaccount_id}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{$randomSportsImage}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_06_informed_vopay_accountid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7cf3da7-dcfd-4613-9c88-0d943dbaceb6",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that DebitorClientAccountID must be inform\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"You must inform a DebitorClientAccountID.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "55f638ad-5da8-4636-88c1-bb16e6e067ea",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "ce7065f9-46f4-4d84-8867-2b0c5589e036",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{vopayaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{vpaccountidkey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{vpaccountidsig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{recipientaccount_id}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_07_informed_vopay_accountid_and_a_blank_DebitorClientAccountID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33d6d9b5-cc5b-4dd9-8f97-86a6c9db6169",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that RecipientAccountID or RecipientClientAccountID must be inform\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"You should inform either RecipientAccountID or RecipientClientAccountID.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af06b4fe-8d28-47bc-867c-1de71c2f98a9",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "9ddfa34f-f40f-480c-8c64-0bb40dbe3c22",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorClientAccountID",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_08_informed_vopay_accountid_and_a_recipientaccountid_and_debitorclientaccountid_that_does_not_exists",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51faad8e-6281-46c4-8c06-7d88d7f2dd92",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that RecipientClientAccountID and DebitorClientAccountID are invalid\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): RecipientClientAccountID (A client account with the provided ClientAccountID does not exist.), DebitorClientAccountID (A client account with the provided ClientAccountID does not exist.)\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4dc1d3af-dd09-486e-bd5e-483f44d1a5b9",
                    "exec": [
                      "var random_amount = _.random(1, 10) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "3f8707c9-3c18-484f-ba2a-3fcb08828132",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{vopayaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{vpaccountidkey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{vpaccountidsig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientClientAccountID",
                      "value": "{{recipientclientaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorClientAccountID",
                      "value": "{{recipientclientaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_09_informed_vopay_accountid_debitorclientaccount_and_recipientaccountid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c01dbaf2-ba4c-423f-874b-bc33379df915",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that transaction is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "59811f01-347d-43dc-920f-db3c1c848ce2",
                    "exec": [
                      "var random_amount = _.random(1, 5) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "ea2cbdb0-b434-43c6-a5c2-0286b1b46645",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{vopayaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{vpaccountidkey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{vpaccountidsig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientClientAccountID",
                      "value": "{{recipientclientaccount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorClientAccountID",
                      "value": "{{debitorclientaccount}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_10_transfer_funds_from_vopayaccount_to_another_vopay_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c7ded8b-e0ac-482f-bfc1-9c7313a9eee1",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction id is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "685dbe6e-1381-4476-b598-2e04b82aa0dc",
                    "exec": [
                      "var random_amount = _.random(1, 10) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "ab9bf801-03c4-40c7-a37a-23bdf235efe3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{recipientaccount_id}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_11_transfer_funds_from_vopayaccount_to_sub_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "385b41e3-48dc-4023-8ce7-1fce924f3aaa",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction id is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4c24e3cc-678d-402d-9add-42d41ab1fce7",
                    "exec": [
                      "var random_amount = _.random(1, 10) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "8e9f8bc7-4a68-4ab8-8822-6c5f5f0daa1f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{recipientsubaccount}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_12_transfer_funds_from_vopayaccount_to_inactivesub_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fe31f49b-20e7-4ea5-badb-64cef80d3e96",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that inactive sub account resulted to username does not exist\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): RecipientAccountID (A user with the provided username does not exist.)\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1bfbc227-5c42-440d-9557-5f8d67dcaa3d",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "73f463e5-8426-493f-9b4a-b0b332c15abd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientAccountID",
                      "value": "{{subaccountid1}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-to",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            }
          ],
          "id": "e041fbc2-dc26-4ff4-af51-6a326195814a"
        },
        {
          "name": "POST account/transfer-from",
          "item": [
            {
              "name": "TC_01_debitoraccountid_with_insufficientfund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6e204e2-aaba-446f-a382-8fc812aff2da",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the DebitorAccountID have insufficient fund\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Available fund is insufficient\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ae15fc-750f-4ce8-8506-7afd6ccd2add",
                    "exec": [
                      "var random_amount = _.random(1, 30) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "608897d3-a5d7-400c-a064-b4d425b467f1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{debitoraccountinsufficientfunds}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_02_debit_funds_from_vopay_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c8213db5-f4eb-4956-b6ae-d1f57d38073c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction id is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "39b9c0b5-007f-474e-8be0-de7f5634ebb1",
                    "exec": [
                      "var random_amount = _.random(1, 10) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "cdca196d-c9e0-4c1d-893b-92dc4f6acdc3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{debitoraccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_03_debit_funds_from_vopay_account_passed_in_idempotencykey",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c8949903-7bc5-4225-90a6-93bd55f2e318",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction id is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9506c5a6-8fdf-45ad-bf6d-6d55c8f8ad97",
                    "exec": [
                      "var random_amount = _.random(1, 10) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);\r",
                      "\r",
                      "pm.environment.set('idempotencykey', _.random(1,5000));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "0b767e10-b5d5-44d5-aab8-290724ef1d08",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{debitoraccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWord}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_04_debit_funds_from_vopay_account_passed_in_same_idempotencykey",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8639ed13-d418-4912-acf2-6b035a7f147b",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the idempotencykey already exists\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"A transaction with a matching idempotency key already exists. Please update this parameter and try again.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e5b9ea74-7179-4ac0-9fa4-a5735d524df5",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "91fcc6fa-6209-4f22-b87d-92f9388c00c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{debitoraccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWord}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_05_account_not_permitted_to_transfer_funds",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "587d647e-b3ea-48a5-b734-07219802df4e",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that account is not permitted to transfer funds from the requested account due to diffent vopay accounts, it should only transfer funds from parent to sub accounts or vice versa\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Your account is not permitted to transfer funds from the requested account.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8244b476-11e6-43e2-8e2c-fef0bc4674bb",
                    "exec": [
                      "// Set the randomName of the IdempotencyKey\r",
                      "var num = Math.floor(Math.random() * 1000000001);\r",
                      "pm.environment.set(\"idempotencykey\", \"accounttransfer\" + num);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "af95c6df-d3eb-48d3-adeb-fe5e29a82943",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "mybtc",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_06_informed_debitoraccountid_as_subaccount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65cf72e6-b099-48b5-a664-0980d407ca7c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that transaction is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "db137e92-9602-4121-ba87-f4cb047429f5",
                    "exec": [
                      "// Set the randomName of the IdempotencyKey\r",
                      "var num = Math.floor(Math.random() * 1000000001);\r",
                      "pm.environment.set(\"idempotencykey\", \"accounttransfer\" + num);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "947a0e83-83d2-4b4b-80db-32418613bd5b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{recipientsubaccount}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_07_collect_funds_subaccount_from_another_subaccount_with_same_parent_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb8e27fc-13a4-4175-a62c-9ff05c5cc84c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that transaction is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51144f37-7bc0-4d8c-89b2-e68816563937",
                    "exec": [
                      "// Set the randomName of the IdempotencyKey\r",
                      "var num = Math.floor(Math.random() * 1000000001);\r",
                      "pm.environment.set(\"idempotencykey\", \"accounttransfer\" + num);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "f7972334-2171-40db-9cf9-3b8fb2d0151b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{vopaysubaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{vopaysubaccountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{vopaysubaccountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{subaccountwithsameparent}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_08_client_account_collect_money_from_vopayaccount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1ec05e9-7327-43a4-82f2-14a3362c6641",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that transaction is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1c92888d-b4b6-43c5-9489-cbb7f9473077",
                    "exec": [
                      "// Set the randomName of the IdempotencyKey\r",
                      "var num = Math.floor(Math.random() * 1000000001);\r",
                      "pm.environment.set(\"idempotencykey\", \"accounttransfer\" + num);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "b4af4521-4726-4437-845f-d209e8d18490",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{vopayaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{vpaccountidkey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{vpaccountidsig}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorClientAccountID",
                      "value": "{{debitorclientaccount}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientClientAccountID",
                      "value": "{{recipientclientaccount}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    },
                    {
                      "key": "Currency",
                      "value": "{{currency_cad}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_09_collect_funds_from_a_parentaccount_with_subacccount_clientaccounts_enabled",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec7dcb01-b258-423e-8c26-747bbbb1a19e",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that transaction is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a8db160-a65e-4973-a34e-8f34574bcccd",
                    "exec": [
                      "// Set the randomName of the IdempotencyKey\r",
                      "var num = Math.floor(Math.random() * 1000000001);\r",
                      "pm.environment.set(\"idempotencykey\", \"accounttransfer\" + num);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "a3266881-c6a3-498c-a150-baeeeb8e5a0d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountid_account_active}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientClientAccountID",
                      "value": "{{recipientclientacccountfromsubaccount}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    },
                    {
                      "key": "Currency",
                      "value": "{{currency_cad}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_10_informed_debitoraccountid_with_different_vopayaccountid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45a05bb0-da10-45be-84de-ba1542e0ac55",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that account is not permitted to transfer funds\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Your account is not permitted to transfer funds from the requested account.\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c6d9bb1b-37e0-4656-8aae-7787c92e9a60",
                    "exec": [
                      "// Set the randomName of the IdempotencyKey\r",
                      "var num = Math.floor(Math.random() * 1000000001);\r",
                      "pm.environment.set(\"idempotencykey\", \"accounttransfer\" + num);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "2a74d4f5-21a2-4316-90cb-7bb838a0c6b0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountid_account_active}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "DebitorAccountID",
                      "value": "{{vopayaccountid}}",
                      "type": "text"
                    },
                    {
                      "key": "RecipientClientAccountID",
                      "value": "{{accountnotpermitttedtotransferfunds}}",
                      "type": "text"
                    },
                    {
                      "key": "ClientReferenceNumber",
                      "value": "{{$randomPhoneNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "Notes",
                      "value": "{{$randomWords}}",
                      "type": "text"
                    },
                    {
                      "key": "IdempotencyKey",
                      "value": "{{idempotencykey}}",
                      "type": "text"
                    },
                    {
                      "key": "Currency",
                      "value": "{{currency_cad}}",
                      "type": "text"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/transfer-from",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            }
          ],
          "id": "ac5cc287-6ecd-4cd8-b732-6cf0cafec2dc"
        },
        {
          "name": "POST account/auto-balance-transfer",
          "item": [
            {
              "name": "TC_01_create_balance_transfer_with_monthly_frequency",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "917798b2-a912-41d7-ae51-3f2fee20357a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction id is created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dcf10d16-2119-49b0-9992-560d75c9c1b6",
                    "exec": [
                      "var random_amount = _.random(1, 30) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);\r",
                      "\r",
                      "var moment = require('moment');\r",
                      "var schedulestartdate = moment().add(2, 'day').format(\"YYYY-MM-DD\");\r",
                      "pm.environment.set(\"schedulestartdate\", schedulestartdate);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "c2bb518f-c221-418e-a6d0-7f98e184b928",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "ScheduleStartDate",
                      "value": "{{schedulestartdate}}",
                      "type": "text"
                    },
                    {
                      "key": "AutoBalanceTransferAmount",
                      "value": "{{amount}}",
                      "type": "text"
                    },
                    {
                      "key": "TypeOfFrequency",
                      "value": "{{frequency_monthly}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    },
                    {
                      "key": "FirstName",
                      "value": "{{firstname}}",
                      "type": "text"
                    },
                    {
                      "key": "LastName",
                      "value": "{{lastname}}",
                      "type": "text"
                    },
                    {
                      "key": "PhoneNumber",
                      "value": "7789127623",
                      "type": "text"
                    },
                    {
                      "key": "Address1",
                      "value": "{{address}}",
                      "type": "text"
                    },
                    {
                      "key": "City",
                      "value": "{{city}}",
                      "type": "text"
                    },
                    {
                      "key": "Province",
                      "value": "{{province}}",
                      "type": "text"
                    },
                    {
                      "key": "Country",
                      "value": "{{country}}",
                      "type": "text"
                    },
                    {
                      "key": "PostalCode",
                      "value": "{{postalcode}}",
                      "type": "text"
                    },
                    {
                      "key": "AccountNumber",
                      "value": "{{account_nbr}}",
                      "type": "text"
                    },
                    {
                      "key": "FinancialInstitutionNumber",
                      "value": "{{financial_ins_nbr}}",
                      "type": "text"
                    },
                    {
                      "key": "BranchTransitNumber",
                      "value": "{{branch_transit_nbr}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/auto-balance-transfer",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_02_passed_in_login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "948c2723-48d5-4423-9516-b1a24d67e124",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that required parameters are missing\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: FinancialInstitutionNumber, BranchTransitNumber, AccountNumber, AutoBalanceTransferAmount, TypeOfFrequency, ScheduleStartDate, FirstName, LastName, Address1, City, Country, PostalCode\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "30c930a1-3ec9-448e-ae18-55756f68a8e9",
                    "exec": [
                      "var random_amount = _.random(1, 30) + 0.88;\r",
                      "pm.environment.set('randomamount', random_amount);\r",
                      "\r",
                      "var moment = require('moment');\r",
                      "var ScheduleStartDate = moment().add(1, 'day').format(\"YYYY-MM-DD\");\r",
                      "pm.environment.set(\"schedulestartdate\", ScheduleStartDate);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "2ed07ca9-2999-4111-8a4f-b83d64bea124",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/auto-balance-transfer",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            }
          ],
          "id": "831d707a-bfcd-4a53-84b3-c957557d3dd8"
        },
        {
          "name": "GET account/auto-balance-transfer",
          "item": [
            {
              "name": "TC_01_get_balance_transfer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29160841-0d37-4187-9074-7912e4ac9f8a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction is returned\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.ScheduleStartDate).is.not.null;",
                      "    pm.expect(jsonData.Description).is.to.equal(\"AutoBalance Setup\");",
                      "    pm.expect(jsonData.NameOfFrequency).is.to.equal(\"monthly\");",
                      "    pm.expect(jsonData.AutoBalanceTransferAmount).is.to.equal(\"1.00\");",
                      "    pm.expect(jsonData.Status).is.not.null;",
                      "    pm.expect(jsonData.PhoneNumber).is.to.equal(\"7789127623\");",
                      "    pm.expect(jsonData.IPAddress).is.to.equal(\"\");",
                      "    pm.expect(jsonData.EmailAddress).is.to.equal(\"kriselle.tined@vopay.com\");",
                      "    pm.expect(jsonData.Address1).is.to.equal(\"3551 Vanness Ave\");",
                      "    pm.expect(jsonData.City).is.to.equal(\"Vancouver\");",
                      "    // pm.expect(jsonData.Province).is.to.equal(\"BC\");",
                      "    pm.expect(jsonData.Country).is.to.equal(\"Canada\");",
                      "    pm.expect(jsonData.PostalCode).is.to.equal(\"V5R 6H8\");",
                      "    pm.expect(jsonData.AccountNumber).is.to.equal(\"123456\");",
                      "    pm.expect(jsonData.FinancialInstitutionNumber).is.to.equal(\"010\");",
                      "    pm.expect(jsonData.BranchTransitNumber).is.to.equal(\"78910\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b1f5f6c2-31c0-40af-b6cd-f5614727ea77",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "1b7c3f5b-372b-4de1-ac92-e043f2296a37",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{url}}api/v2/account/auto-balance-transfer?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "auto-balance-transfer"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    }
                  ]
                },
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            }
          ],
          "id": "61518014-f8c6-41b3-9fe7-d522d3fc7230"
        },
        {
          "name": "POST account/auto-balance-transfer/cancel",
          "item": [
            {
              "name": "TC_01_cancel_balance_transfer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77acb65a-e25c-41d2-aa76-32a9a0199c66",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction is cancelled\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.Status).is.to.equal(\"cancelled\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3cdf9a3c-7bb8-4422-870d-0554e1b43a4e",
                    "exec": [
                      "var env_url = pm.environment.get(\"url\");\r",
                      "var account_id = pm.environment.get(\"accountid\");\r",
                      "var api_key = pm.environment.get(\"accountapikey\");\r",
                      "var signature = pm.environment.get(\"accountapisig\");\r",
                      "var moment = require('moment');\r",
                      "var start_date = moment().add(1, 'day').format(\"YYYY-MM-DD\");\r",
                      "pm.environment.set(\"schedulestartdate\", start_date);\r",
                      "\r",
                      "\r",
                      "pm.sendRequest({\r",
                      "    url:  env_url + \"api/v2/account/auto-balance-transfer?AccountID=\" + account_id + \" &Key=\" + api_key +\"&Signature=\" + signature +\"&ScheduleStartDate=\" + start_date+ \"&FirstName=John&LastName=Doe&PhoneNumber=6041235678&Address1=123 Vanness Ave&City=Vancouver&Province=BC&Country=Canada&PostalCode=V6Z1J1&AutoBalanceTransferAmount=10&TypeOfFrequency=daily&AccountNumber=123456&FinancialInstitutionNumber=5677&BranchTransitNumber\",\r",
                      "    method: \"POST\",\r",
                      "    headers: {},\r",
                      "    body: {},\r",
                      "},\r",
                      " function (err, res) {\r",
                      "    pm.environment.set(\"balance_transfer_status\", res.json().Status);\r",
                      " }\r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "fd3ebabc-a943-4d47-9121-521c41d0f45d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/auto-balance-transfer/cancel",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            },
            {
              "name": "TC_02_already_cancelled_balance_transfer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cab3f1fa-f6f3-427f-b075-b4b47082efdb",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check that the transaction is already cancelled\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"The auto balance transfer is already cancelled\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e3553edf-235f-4191-8ce5-cfe9860251e3",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "4e6fb0ca-a383-4215-bb73-67283622f230",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/auto-balance-transfer/cancel",
                "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
              },
              "response": []
            }
          ],
          "id": "89b9a8ed-8fe1-4f49-adf7-392a2c17bcb9"
        },
        {
          "name": "POST account/subaccount",
          "item": [
            {
              "name": "TC_01_existing_user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6dbf4419-b11b-4f19-90e6-63c171531d3d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that account id already exists\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('The Account ID user_sub_01 already exists. Please try again.');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "d0ae4581-acfe-4d01-ab68-59ea42b9de37",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "Rath - Kub",
                      "type": "text"
                    },
                    {
                      "key": "AccountName",
                      "value": "user_sub_01",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process.\r\n\r\n"
              },
              "response": []
            },
            {
              "name": "TC_02_newly_created_user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9dfe89c-7e87-40f1-a417-890a9bf3b58c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "var CryptoJS = require(\"crypto-js\");",
                      "",
                      "// Function to return the correct date format. ",
                      "function returnDate() {",
                      "\tvar today = new Date();",
                      "    var dd = today.getDate();",
                      "    var mm = today.getMonth() + 1; ",
                      "    var yyyy = today.getFullYear();",
                      "    ",
                      "    if (dd < 10) {",
                      "        dd = '0' + dd;",
                      "    } ",
                      "",
                      "    if (mm < 10) {",
                      "        mm = '0' + mm;",
                      "    } ",
                      "    ",
                      "    return yyyy + '-' + mm + '-' + dd;  ",
                      "};",
                      "",
                      "// generate the Signature. ",
                      "function returnSignature(a_Key, a_ApiSharedSecret) {",
                      "   var Key = '';",
                      "   var shareSecret = '';",
                      "   var CurrentDate = returnDate();",
                      "   ",
                      "   if (a_Key) {",
                      "       Key = a_Key;",
                      "   } ",
                      "   ",
                      "   if (a_ApiSharedSecret) {",
                      "       shareSecret = a_ApiSharedSecret;",
                      "   }",
                      "   ",
                      "   return CryptoJS.SHA1(Key + shareSecret + CurrentDate).toString();",
                      "};",
                      "",
                      "pm.test(\"Verify that sub account is successfully created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.Message).is.to.equal('Your account has been created successfully.');",
                      "});",
                      "",
                      "// Assing the values to a diff variables. ",
                      "if (jsonData.Success === true) {",
                      "    var link = jsonData.Link;",
                      "    var token = link ? link.split(\"/\") : null;",
                      "    token = token ? token[token.length - 1] : null",
                      "   ",
                      "    pm.environment.set(\"subaccountid2_sharedsecretkey\", jsonData.APISharedSecret);",
                      "    pm.environment.set(\"subaccountid2_key\", jsonData.APIKey);",
                      "    pm.environment.set(\"subaccountid2_singletoken\", token);",
                      "   ",
                      "    // Creating the Signature.",
                      "    pm.environment.set(\"subaccountid1_key\", jsonData.APIKey);",
                      "    pm.environment.set(\"subaccountid1_singletoken\", token);",
                      "    pm.environment.set('subaccountid1_sig', returnSignature(jsonData.APIKey, jsonData.APISharedSecret));",
                      "",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "edb12e2d-1f02-45d6-9ae9-e0726b75c613",
                    "exec": [
                      "// Set the randomName of the Subaccount",
                      "var time = Date.now();",
                      "pm.environment.set(\"subaccountid1\", \"subaccount\" + time);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "82f061ed-9f62-48cb-9721-d442feb8f6ad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "AccountName",
                      "value": "{{subaccountid1}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    },
                    {
                      "key": "SendWelcomeEmail",
                      "value": "",
                      "type": "text",
                      "disabled": true
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process."
              },
              "response": []
            },
            {
              "name": "TC_03_accountname_not_informed_while_subaccount_is_informed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0d2f8e9-fb06-482b-8e3c-1e60a8b7b16d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "var CryptoJS = require(\"crypto-js\");",
                      "",
                      "",
                      "// Function to return the correct date format. ",
                      "function returnDate() {",
                      "\tvar today = new Date();",
                      "    var dd = today.getDate();",
                      "    var mm = today.getMonth() + 1; ",
                      "    var yyyy = today.getFullYear();",
                      "    ",
                      "    if (dd < 10) {",
                      "        dd = '0' + dd;",
                      "    } ",
                      "",
                      "    if (mm < 10) {",
                      "        mm = '0' + mm;",
                      "    } ",
                      "    ",
                      "    return yyyy + '-' + mm + '-' + dd;  ",
                      "};",
                      "",
                      "// generate the Signature. ",
                      "function returnSignature(a_Key, a_ApiSharedSecret) {",
                      "   var Signature = '';",
                      "   var Key = '';",
                      "   var shareSecret = '';",
                      "   var CurrentDate = returnDate();",
                      "   ",
                      "   if (a_Key) {",
                      "       Key = a_Key;",
                      "   } ",
                      "   ",
                      "   if (a_ApiSharedSecret) {",
                      "       shareSecret = a_ApiSharedSecret;",
                      "   }",
                      "   ",
                      "   return CryptoJS.SHA1(Key + shareSecret + CurrentDate).toString();",
                      "};",
                      "",
                      "pm.test(\"Verify that sub account is successfully created\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.Message).is.to.equal('Your account has been created successfully.');",
                      "});",
                      "",
                      "// Assing the values to a diff variables. ",
                      "// Assing the values to a diff variables. ",
                      "if (jsonData.Success === true) {",
                      "    var link = jsonData.Link;",
                      "    var token = link ? link.split(\"/\") : null;",
                      "    token = token ? token[token.length - 1] : null",
                      "   ",
                      "    pm.environment.set(\"subaccountid2_sharedsecretkey\", jsonData.APISharedSecret);",
                      "    pm.environment.set(\"subaccountid2_key\", jsonData.APIKey);",
                      "    pm.environment.set(\"subaccountid2_singletoken\", token);",
                      "    ",
                      "    // Creating the Signature.",
                      "    pm.environment.set('subaccountid2_sig', returnSignature(jsonData.APIKey, jsonData.APISharedSecret));",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "241ab2fc-deae-407a-8f33-6a4b36a06fc8",
                    "exec": [
                      "// Set the randomName of the Subaccount",
                      "var time = Date.now();",
                      "pm.environment.set(\"subaccountid2\", \"subaccount\" + time);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "81a9df17-2148-4fde-b126-144e48bac157",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "{{subaccountid2}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process.\r\n\r\n"
              },
              "response": []
            },
            {
              "name": "TC_04_passed_in_legalbusinessname_and_emailaddress",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8452c39d-144c-4655-a89c-1ba4cddc1dfd",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that sub account id is not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('The Field SubaccountID is required');",
                      "",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "56b8c69f-0fab-414d-80bc-ab306391b3b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process.\r\n\r\n"
              },
              "response": []
            },
            {
              "name": "TC_05_passed_in_accountname_as_subaccountid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b641ca2-d47f-4e55-9dea-f95757a12aaa",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that AccountName is deprecated \", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('The Field AccountName is deprecated. Please use the field SubaccountID instead.');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "ac5bafb5-b8d2-45d3-8937-7a48e80abfb1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "AccountName",
                      "value": "accountName_12",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "accountname_12",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process.\r\n\r\n"
              },
              "response": []
            },
            {
              "name": "TC_06_passed_in_subaccount_and_emailaddress",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1117f15e-138b-4a3d-8160-f8d5d83d08a3",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify that LegalBusinessName is not provided\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('Required parameter(s) missing: LegalBusinessName');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "80541ce7-c0cf-4b58-8c64-ba477e40f263",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "{{subaccountID2}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "To verify the result when the LegalBusinessName is not provided."
              },
              "response": []
            },
            {
              "name": "TC_07_passed_in_subaccountid_and_legalbusinessname",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb375425-41e4-4f12-ab57-480a34882b8a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify that EmailAddress is not provided\", function() {\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('Required parameter(s) missing: EmailAddress');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "1ec5d0c1-141e-4a26-b463-d878f9540008",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "{{subaccountID2}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "To verify the result when the email is not provided."
              },
              "response": []
            },
            {
              "name": "TC_08_accountid_is_passed_with_subaccountid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1dca841f-10d9-461c-b7bd-2b066af895ea",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify the result when AccountID is passed same as SubAccountID \", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('This User is invalid or inactive. Please try again');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "e76f24e2-4e89-406f-a48f-ca01478caece",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountID2}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountID2_Key}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountID2_Signature}}",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "{{subaccountID2}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "To verify the result when the accountId is passed same as subaccountId."
              },
              "response": []
            },
            {
              "name": "TC_09_subaccountid_is_passed_with_accountid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c1ae227-cb22-4be9-8955-18a273b72e18",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify the result when SubAccountID is passed same as AccountID \", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"The Account ID testuser already exists. Please try again.\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "8795c16a-ef39-48b6-b993-e4bd24e607cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "To verify the result when SubaccountID is passed same as accountID."
              },
              "response": []
            },
            {
              "name": "TC_10_passed_in_subaccountId_with_spaces_in_between",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686d827f-4105-4359-8985-4014ab902c2d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify the result with error message when there are spaces between the SubaccountID \", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('Invalid Parameter(s): SubaccountID (Input includes invalid characters.)');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "98e159ed-f54d-4b09-961b-a96f7fab4cc1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "user_sub_ 01",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "{{emailaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "To verify that there is an error message when there is spaces between the SubAccountID."
              },
              "response": []
            },
            {
              "name": "TC_11_passed_in_emailaddress_as_invalid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c9108fa9-b818-4be0-8ab2-ccf8926bf8ee",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify the result with invalid EmailAddress \", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('Invalid Parameter(s): EmailAddress (A valid email address is required)');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "27a5106a-fb5d-4676-90d6-cfc71df5e36b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "SubaccountID",
                      "value": "{{subaccountid2}}",
                      "type": "text"
                    },
                    {
                      "key": "LegalBusinessName",
                      "value": "{{$randomCompanyName}}",
                      "type": "text"
                    },
                    {
                      "key": "EmailAddress",
                      "value": "aaa@",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/subaccount",
                "description": "To verify the result when the email passed is invalid."
              },
              "response": []
            }
          ],
          "id": "ceb836e9-fac8-4d2e-aee9-b2992e54636c"
        },
        {
          "name": "GET account/subaccount",
          "item": [
            {
              "name": "TC_01_retrieve_all_subaccounts_of_main_accounts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7f54fe3-a17c-4bf7-bf4f-da9d0b8aac90",
                    "exec": [
                      "let jsonData; ",
                      "try {",
                      "    jsonData = JSON.parse(responseBody);",
                      "    }",
                      "catch {",
                      "    console.log(`While trying to parse body, got ${err.message}`);",
                      "}",
                      "",
                      "pm.test(\"Verify the associated sub account of a parent account\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ParentAccount).is.to.equal(\"testuser\");",
                      "    pm.expect(jsonData.Subaccounts[0].LegalBusinessName).is.to.equal(\"Rath - Kub\");",
                      "    pm.expect(jsonData.Subaccounts[0].AccountName).is.to.equal(\"Rath - Kub\");",
                      "    pm.expect(jsonData.Subaccounts[0].AccountID).is.to.equal(\"user_sub_01\");",
                      "    pm.expect(jsonData.Subaccounts[0].OriginatorName).is.to.equal(\"Vopay International\");",
                      "    pm.expect(jsonData.Subaccounts[0].OriginatorShortName).is.to.equal(\"Vopay Int\");",
                      "    pm.expect(jsonData.Subaccounts[0].Email).is.to.equal(\"vopaytest01@gmail.com\");",
                      "    pm.expect(jsonData.Subaccounts[0].Phone).is.to.equal(\"7789876547\");",
                      "    pm.expect(jsonData.Subaccounts[0].Fax).is.to.equal(\"32154578\");",
                      "    pm.expect(jsonData.Subaccounts[0].City).is.to.equal(\"Vancouver\");",
                      "    pm.expect(jsonData.Subaccounts[0].Province).is.to.equal(\"British Columbia\");",
                      "    pm.expect(jsonData.Subaccounts[0].Country).is.to.equal(\"Canada\");",
                      "    pm.expect(jsonData.Subaccounts[0].PostalCode).is.to.equal(\"V5R 6H8\");",
                      "    pm.expect(jsonData.Subaccounts[0].Address).is.to.equal(\"510 Vanness Ave\");",
                      "    //pm.expect(jsonData.Subaccounts[0].FlinksUrl).is.to.equal(\"\");",
                      "    pm.expect(jsonData.Subaccounts[0].WebhookUrl).is.to.equal(\"https://www.google.com\");",
                      "    pm.expect(jsonData.Subaccounts[0].IsActive).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].GCMEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].EFTCollectEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].EFTSendEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].USDEFTCollectEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].USDEFTSendEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].VisaDirectEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].InteracMoneyRequestEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].InteracBulkPayoutEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].IQ11StandardEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].IQ11BoostEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].IQ11PlusEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].IQ11AdvantageEnabled).is.to.equal(true);",
                      "    pm.expect(jsonData.Subaccounts[0].TransactionServiceDefault).is.to.equal(\"Iq11 Plus\");",
                      "    pm.expect(jsonData.Subaccounts[0].PayLinkEnabled).is.to.equal(true);",
                      "    ",
                      "    //Balances",
                      "    pm.expect(jsonData.Subaccounts[0].Balances[0].Currency).is.to.equal(\"CAD\");",
                      "    pm.expect(jsonData.Subaccounts[0].Balances[0].AccountBalance).not.equal(null);",
                      "    pm.expect(jsonData.Subaccounts[0].Balances[0].PendingBalance).not.equal(null);",
                      "    pm.expect(jsonData.Subaccounts[0].Balances[0].SecurityDeposit).not.equal(null);",
                      "    pm.expect(jsonData.Subaccounts[0].Balances[0].AvailableBalance).not.equal(null);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "f986ff51-763e-4ef4-b92b-e95e92042929",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/subaccount?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "subaccount"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    }
                  ]
                },
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process.\r\n\r\n"
              },
              "response": []
            },
            {
              "name": "TC_02_passed_in_accountid_as_subaccount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "58c98836-0541-4ce1-85e7-f1db43f72373",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that sub account cannot access this end point, only parent account does\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('You do not have access to this feature. Please contact VoPay business team at business@vopay.com');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "3a080de0-c673-4621-877c-b7259b604080",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/subaccount?AccountID={{subaccountid_account_active}}&Key={{subaccountapikey}}&Signature={{subaccountapisig}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "subaccount"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountid_account_active}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountapisig}}"
                    }
                  ]
                },
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process.\r\n\r\n"
              },
              "response": []
            },
            {
              "name": "TC_03_passed_in_inactive_subaccount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "00503463-e812-4e64-aabd-cac90dc3eca8",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify inactive sub accounts won't access the endpoint\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal('This User is invalid or inactive. Please try again');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "16e81cf6-0afa-4a69-aa04-9178cc06b631",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/subaccount?AccountID={{subaccountID1}}&Key={{subaccountapikey}}&Signature={{subaccountapisig}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "subaccount"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountID1}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountapisig}}"
                    }
                  ]
                },
                "description": "This method is used to create a new sub-account. Remember that you have to have access to this feature before you create a new sub-account.\r\n\r\nThe data shown in the request body is all mandatory; Therefore, if for any reason you leave a field blank or don't send all the required parameters, the API will respond with an error. The second step is after you create the subaccount, an email will be sent to the email account provided to complete with the rest of the required fields to finalize the process.\r\n\r\n"
              },
              "response": []
            }
          ],
          "id": "09976f4a-6092-44d4-8e6b-68a65e625ebf"
        },
        {
          "name": "POST account/authorized-ips",
          "item": [
            {
              "name": "TC_01_add_wildcard_as_valid_ip_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e710fd9-ea17-41f3-9828-5164343e6d4a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify you can automatically add a wildcard as a valid ips to the account\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                      "    pm.expect(jsonData.Message).is.to.equal(\"You have chosen to not provide any authorized IP addresses for your account. For security reasons, it is highly recommended that you provide at least one authorized IP address.\");\r",
                      "    pm.expect(jsonData.AuthorizedIPs).is.to.equal(\"*\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "2ded5422-98b8-49dd-bfff-19fe74caf581",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "{{wildcardip}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            },
            {
              "name": "TC_02_add_one_valid_ip_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "89044652-824d-4c31-b491-837d5cc76507",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify you can automatically add one valid ip to the account\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                      "    pm.expect(jsonData.Message).to.be.null;\r",
                      "    pm.expect(jsonData.AuthorizedIPs).is.to.equal(\"3.86.81.187\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "5f4c5102-4f2d-4799-a522-bbd6a2a1cb31",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "{{ipaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            },
            {
              "name": "TC_03_add_list_valid_ip_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "204a434c-08d7-48d8-8e05-e80d80f3421f",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify you can automatically add a list of valid ips to the account\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                      "    pm.expect(jsonData.AuthorizedIPs).is.to.equal(\"3.86.81.187,3.86.81.188,3.86.81.189\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "83746920-6572-4f71-88b7-279a32b416b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "{{ipaddresses}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            },
            {
              "name": "TC_04_not_permited_add_one_invalid_ip_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08044b18-e57d-47c0-9d58-8d3281df263e",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify that it's not possible to add one invalid ip to the account\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): AuthorizedIPs (An invalid IP address was found: 265.255.255.255)\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "499192f4-62b8-4aac-89c6-0091eec2cac5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "{{invalidipaddress}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            },
            {
              "name": "TC_05_not_permited_add_list_invalid_ip_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a85b0e9-e65d-4b77-8e20-4d1f72b0676d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify that it's not possible to add a list of invalid ips to the account\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): AuthorizedIPs (An invalid IP address was found: 265.86.81.187)\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "31a117dc-9440-4d0b-883a-3a477fa931d5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "{{invalidipaddresses}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            },
            {
              "name": "TC_06_not_permited_add_list_wildcard_ip_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "980d5432-9ba9-42f4-ae32-453ba52c3eaa",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify that is not possible to add a list of wildcard as a valid ips to the account\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): AuthorizedIPs (An invalid IP address was found: *)\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "bd612334-7f66-4ff0-8a85-c959566361c1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "{{listwildcardip}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            },
            {
              "name": "TC_07_not_permited_add_ip_account_using_semicolon",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecedacb5-4655-4e46-9de7-55d0e4290e93",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify that it's not possible to add a list of valid ip to the account while using other than a comma as a delimeter.\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): AuthorizedIPs (An invalid IP address was found: 3.86.81.187;3.86.81.188;3.86.81.189)\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "34876285-972d-400e-b122-805fd8eb156f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "3.86.81.187;3.86.81.188;3.86.81.189",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            },
            {
              "name": "TC_08_not_permited_add_ip_account_using_slashes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ce3cd94-5eca-4f7e-9565-a74a85a18ed6",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify that it's not possible to add a list of valid ip to the account while using other than a comma as a delimeter.\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): AuthorizedIPs (An invalid IP address was found: 3.86.81.187/3.86.81.188/3.86.81.189)\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "5b59ec7d-04a0-435b-9b77-90fcced34867",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "AuthorizedIPs",
                      "value": "3.86.81.187/3.86.81.188/3.86.81.189",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/authorized-ips"
              },
              "response": []
            }
          ],
          "id": "02022f15-9cb5-4c44-bd03-63e9c29903bb"
        },
        {
          "name": "GET account/authorized-ips",
          "item": [
            {
              "name": "TC_01_get_valid_ips",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "886da92d-3108-47a5-9789-d2917ecffe10",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify you can get the list of valid ips to the account\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                      "    pm.expect(jsonData.AuthorizedIPs).is.to.equal(\"3.86.81.187,3.86.81.188,3.86.81.189\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "5811ac3c-4438-4b86-92cd-69b6d4112527",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/authorized-ips?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "authorized-ips"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "8b3ab909-399e-44e9-b00d-dfbe86c2f455"
        },
        {
          "name": "POST account/set-plaid-credentials",
          "item": [
            {
              "name": "TC_01_update_credentials_set_plaidurl_as_dev",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d84160fd-2976-43f8-b853-49a7f5863bbc",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid credentials is updated successfully\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.PlaidClientID).is.to.equal(\"5d9621a552cdf50014df5df9\");",
                      "    pm.expect(jsonData.PlaidSecretKey).is.to.equal(\"7a371911a93a1f4752225ac1a42948\");",
                      "    pm.expect(jsonData.PlaidUrl).is.to.equal(\"https://development.plaid.com\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "e3009d08-c055-486b-9af8-62cb4d3eb0b0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "{{plaidurldev}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are updated (using the dev url)."
              },
              "response": []
            },
            {
              "name": "TC_02_update_credentials_set_plaidurl_as_sandbox",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e0b410d-358a-4ac6-8c03-fa02ceee6fe5",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid credentials is updated successfully\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.PlaidClientID).is.to.equal(\"5d9621a552cdf50014df5df9\");",
                      "    pm.expect(jsonData.PlaidSecretKey).is.to.equal(\"7a371911a93a1f4752225ac1a42948\");",
                      "    pm.expect(jsonData.PlaidUrl).is.to.equal(\"https://sandbox.plaid.com\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "4053ba41-f888-45af-a304-7351cc751c85",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "{{plaidurlsandbox}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are updated (using the sandbox url)."
              },
              "response": []
            },
            {
              "name": "TC_03_update_credentials_set_plaidurl_as_production",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d2c651a-33b9-4a0f-8465-5cc891780572",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid credentials is updated successfully\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.PlaidClientID).is.to.equal(\"5d9621a552cdf50014df5df9\");",
                      "    pm.expect(jsonData.PlaidSecretKey).is.to.equal(\"7a371911a93a1f4752225ac1a42948\");",
                      "    pm.expect(jsonData.PlaidUrl).is.to.equal(\"https://production.plaid.com\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "92d41736-12b3-4679-ac17-d9923f18bb55",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "{{plaidurlprod}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are updated (using the production url)."
              },
              "response": []
            },
            {
              "name": "TC_04_passed_in_invalid_plaidurl",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "add430c1-355d-432c-8bae-fcfd407a6a09",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid url is invalid\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): PlaidUrl (Input includes invalid characters.)\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "8bd496e1-2907-4a6f-bac8-e8135b041c29",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "https://productions.plaid.com",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are not updated when it's informed an incorrect plaid url."
              },
              "response": []
            },
            {
              "name": "TC_05_passed_in_empty_plaidurl",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf118f0c-b851-4125-ac1a-473ebdbea478",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid url is not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: PlaidUrl\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "25edb86b-0f91-4b88-9919-2a3a817aa1f7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are not updated when the plaid url field is empty."
              },
              "response": []
            },
            {
              "name": "TC_06_passed_in_empty_plaidsecretkey_and_url",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f5e4932-5806-4f84-bf40-3c4c948abf21",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that required plaid credentials are not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: PlaidSecretKey, PlaidUrl\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "006af238-bc4d-4cc1-9f1f-7d933a418029",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are not updated when the plaid url and plaid secret key fields are empty."
              },
              "response": []
            },
            {
              "name": "TC_07_passed_in_empty_plaid_clientid_secretkey_and_url",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39aae306-ad3e-49e7-b60f-36aeee01bb76",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that required plaid credentials are not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: PlaidClientID, PlaidSecretKey, PlaidUrl\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "68450a46-b46f-474e-ae6e-92c07ba93f77",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are not updated when the PlaidClientID, PlaidSecretKey, PlaidUrl fields are empty."
              },
              "response": []
            },
            {
              "name": "TC_08_update_credentials_missing_plaid_client_id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2a14f98-3d15-45b7-85f1-d21f85f08476",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid client id is not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: PlaidClientID\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "5f0ef54d-46d7-450f-a450-5aeedcdfce1a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "{{plaidurldev}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are not updated when the PlaidClientID field is not informed."
              },
              "response": []
            },
            {
              "name": "TC_09_update_credentials_missing_plaidurl",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfce130b-8b24-43d0-a1e8-95e9c93bcae8",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid url is not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: PlaidUrl\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "02619246-a96d-44b8-97b6-103d10c30ae8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are not updated when the Plaid URL field is not informed."
              },
              "response": []
            },
            {
              "name": "TC_10_update_credentials_missing_clientid_secretkey",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb1e6e66-3db0-4c70-ad44-5aa781025f15",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid client id and secret key is not provided\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: PlaidClientID, PlaidSecretKey\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "c8684d9b-d870-4fbc-aafe-fe776b3b78ed",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "{{plaidurldev}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials",
                "description": "Plaid credentials are not updated when the PlaidClientID and PlaidSecretKey fields are not informed."
              },
              "response": []
            },
            {
              "name": "TC_11_plaid_update_credentials_dev_url_pending_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0cfb9f40-1c38-4d58-9d7b-a05638f4be52",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify that plaid credentials is updated successfully\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.expect(jsonData.PlaidClientID).is.to.equal(\"5d9621a552cdf50014df5df9\");",
                      "    pm.expect(jsonData.PlaidSecretKey).is.to.equal(\"7a371911a93a1f4752225ac1a42948\");",
                      "    pm.expect(jsonData.PlaidUrl).is.to.equal(\"https://development.plaid.com\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "3ef59902-5d5b-49a3-9ef6-b6a26ca70d38",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountid_account_active}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidClientID",
                      "value": "{{plaidclientid}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidSecretKey",
                      "value": "{{plaidsecretkey}}",
                      "type": "text"
                    },
                    {
                      "key": "PlaidUrl",
                      "value": "{{plaidurldev}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-plaid-credentials"
              },
              "response": []
            }
          ],
          "id": "4ee8cc72-1e50-4ec5-9117-ce847f7ca7b6"
        },
        {
          "name": "POST account/set-flinks-credentials",
          "item": [
            {
              "name": "TC_01_set_flinks_url",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78d2a21f-a422-40b6-a26c-b681212237d9",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "//Assert the following:",
                      "pm.test(\"Verify flinks url is updated\", function() {",
                      "    //pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "    pm.environment.set(\"flinksurl\", jsonData.FlinksUrl);",
                      "    pm.expect(jsonData.Status).is.to.equal(\"Updated\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "d3a6a568-e8ce-4dd0-95c8-63be7c1b1391",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "FlinksUrl",
                      "value": "{{url}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-flinks-credentials",
                "description": "Should update with success a flinks credential."
              },
              "response": []
            },
            {
              "name": "TC_02_passed_in_invalidurl",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48009587-18bd-483c-9e3e-853ee0969ae4",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "//Assert the following:",
                      "pm.test(\"Verify that FlinksUrl is not valid\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): FlinksUrl (The URL provided is not valid)\");",
                      "",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "796e5257-bcf2-4d2e-abd2-ab278bfa9542",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "FlinksUrl",
                      "value": "{{$guid}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-flinks-credentials",
                "description": "Verify the error message when it's provided an invalid flinks url."
              },
              "response": []
            },
            {
              "name": "TC_03_passed_in_empty_flinksurl",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88d7d659-dd5f-4272-9cee-3bfcceb59697",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "//Assert the following:",
                      "pm.test(\"Verify flinks url is required\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(false);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: FlinksUrl\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "a66f46c8-497f-4ffe-817b-8607ae91b166",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "FlinksUrl",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-flinks-credentials",
                "description": "Verify the error message when the flinks url is informed, but its value is empty."
              },
              "response": []
            },
            {
              "name": "TC_04_passed_in_login_credentials",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a50bbf4-3bfc-4064-be75-d59813605db7",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"Verify when FlinksUrl parameter is missing\", function() {\r",
                      "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: FlinksUrl\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "3068bd27-8868-47a3-ac82-3b760ae892ba",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-flinks-credentials",
                "description": "To verify the result when the flinks url parameter is missing."
              },
              "response": []
            },
            {
              "name": "TC_05_update_flinksurl_of_pending_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "523ab5c2-09fb-4515-81bd-237bdb3c254e",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Verify flinks url is updated\", function() {",
                      "    pm.expect(jsonData.Success).is.to.equal(true);",
                      "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "a2af5d34-c9ee-4038-ac5a-9ea6e5f54fbc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountid1}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountid1_key}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountid1_sig}}",
                      "type": "text"
                    },
                    {
                      "key": "FlinksUrl",
                      "value": "{{flinksurl}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/account/set-flinks-credentials"
              },
              "response": []
            }
          ],
          "id": "2dcbf4fd-f6ac-41ec-af6d-0475a7e9a40c"
        },
        {
          "name": "POST fiserv/generate-session-token",
          "item": [
            {
              "name": "TC_01_to_generate_fiserv_token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f341af06-a5b0-41b1-af90-9ab2cc332b97",
                    "exec": [
                      "// var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "// pm.test(\"Verify that fiserv token is generated\", function () {\r",
                      "//     pm.expect(jsonData.Success).is.to.equal(true);\r",
                      "//     pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                      "//     pm.environment.set(\"fiservsessiontoken\", jsonData.SessionToken);\r",
                      "//     pm.environment.set(\"fiservtoken\", jsonData.FiservToken);\r",
                      "// });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "7f701dd9-e1f9-4c78-b010-eb4c410fa57a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{url}}api/v2/fiserv/generate-session-token",
                "description": "Should generate the fiserv token with success."
              },
              "response": []
            }
          ],
          "id": "57733a8a-fcb0-41a2-a67c-ca89431bf7c9"
        },
        {
          "name": "POST account/fund-my-account",
          "item": [
            {
              "name": "TC_01_fund_my_account",
              "id": "0330f701-31e0-4aa4-a8bb-f8f106ffc5b2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/fund-my-account?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Amount={{randomamount}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "fund-my-account"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "e1e79722-cf3b-4ab9-8282-d8c2db6c53be"
        },
        {
          "name": "POST account/withdraw-my-account",
          "item": [
            {
              "name": "TC_01_withdraw_my_account",
              "id": "e9cd23f0-50fc-47a9-80eb-e2c45cb76a94",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/withdraw-my-account?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Amount={{randomamount}}",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "withdraw-my-account"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Amount",
                      "value": "{{randomamount}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "8a54ba5e-d657-4405-82fe-26e836453710"
        },
        {
          "name": "POST account/set-default-payment-method",
          "item": [
            {
              "name": "TC_01_set-default-payment-method-vopay",
              "id": "77987e01-eee9-4f2b-baaa-115faff1bb2e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/set-default-payment-method?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&PaymentMethod=vopay",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "set-default-payment-method"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "PaymentMethod",
                      "value": "vopay"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "TC_02_set-default-payment-method-bank",
              "id": "f2826923-3faf-4ab3-a50c-3f64385e7865",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/set-default-payment-method?AccountID=testuser&Key=a95b61dcc6415e0f9025990b523e439e2ffef984&Signature=833ae13a7d3091d9b27a7cdec5ddf57f2307f01c&PaymentMethod=bank",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "set-default-payment-method"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "testuser"
                    },
                    {
                      "key": "Key",
                      "value": "a95b61dcc6415e0f9025990b523e439e2ffef984"
                    },
                    {
                      "key": "Signature",
                      "value": "833ae13a7d3091d9b27a7cdec5ddf57f2307f01c"
                    },
                    {
                      "key": "PaymentMethod",
                      "value": "bank"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "TC_03_set-default-payment-method-bank-no-default-bank",
              "id": "d8da2526-7e77-4ac2-b79b-518b4908f7f2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/set-default-payment-method?AccountID={{subaccountid_account_active}}&Key={{subaccountapikey}}&Signature={{subaccountapisig}}&PaymentMethod=bank",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "set-default-payment-method"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{subaccountid_account_active}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{subaccountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{subaccountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PaymentMethod",
                      "value": "bank",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "TC_04_set-default-payment-method-credit",
              "id": "50218bef-2f42-4ef1-9252-95ef7ce1284f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/set-default-payment-method?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&PaymentMethod=credit",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "set-default-payment-method"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}",
                      "type": "text"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}",
                      "type": "text"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}",
                      "type": "text"
                    },
                    {
                      "key": "PaymentMethod",
                      "value": "credit",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "7f8325ac-fe14-403c-a406-c22eae6c345b"
        },
        {
          "name": "GET account/default-payment-method",
          "item": [
            {
              "name": "TC_01-get-default-payment-method",
              "id": "93ea6c33-7d2d-4e19-8922-0697cf788472",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": []
              },
              "response": []
            }
          ],
          "id": "b99c6842-5f85-421c-9d60-4dac195fcc26"
        },
        {
          "name": "POST account/set-my-bank-account",
          "item": [
            {
              "name": "TC_01-set-my-bank-account",
              "id": "3e5922a1-949b-445e-a4a6-d89a6a426ea9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/set-my-bank-account?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Token=osowsosc0gwscscwcskgs8cck0kwwskkcw4kwk0s8s4swwsk8gokcsk448sk8gsw",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "set-my-bank-account"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Token",
                      "value": "osowsosc0gwscscwcskgs8cck0kwwskkcw4kwk0s8s4swwsk8gokcsk448sk8gsw"
                    },
                    {
                      "key": "",
                      "value": null,
                      "type": "text",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "TC_02-set-my-bank-account-with-default",
              "id": "ee067895-0da1-4e3d-a049-3f4e70e75429",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/set-my-bank-account?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Token=k48ogo8ks04o4wg0ko40ss4csck4oss08kk88k0k4ow8cskkkwc408008ckg40wg&SetAsDefault=true",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "set-my-bank-account"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Token",
                      "value": "k48ogo8ks04o4wg0ko40ss4csck4oss08kk88k0k4ow8cskkkwc408008ckg40wg"
                    },
                    {
                      "key": "SetAsDefault",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "TC_03-set-my-bank-account-with-invalid-token",
              "id": "9f1de05b-d6fe-4f21-be98-fe58343d7106",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{url}}api/v2/account/set-my-bank-account?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}&Token=8cogc4cg44k8koccs4cg84ogwcww4wgs88sk440wsosw8gkg4ggoggkswk80gocc&SetAsDefault=true",
                  "host": [
                    "{{url}}api"
                  ],
                  "path": [
                    "v2",
                    "account",
                    "set-my-bank-account"
                  ],
                  "query": [
                    {
                      "key": "AccountID",
                      "value": "{{accountid}}"
                    },
                    {
                      "key": "Key",
                      "value": "{{accountapikey}}"
                    },
                    {
                      "key": "Signature",
                      "value": "{{accountapisig}}"
                    },
                    {
                      "key": "Token",
                      "value": "8cogc4cg44k8koccs4cg84ogwcww4wgs88sk440wsosw8gkg4ggoggkswk80gocc"
                    },
                    {
                      "key": "SetAsDefault",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "9f4fc9c7-9687-42e2-bd9b-1059c88b1d3f"
        }
      ],
      "id": "0c662afb-9a3b-41c6-b964-2d94f85a85c5",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "4b83c6ab-0065-40ce-b714-e0a38494e9a5",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "275a61cf-3510-41d0-9369-93173a5af4b2",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Create Refund",
      "item": [
        {
          "name": "TC_01_create_funding_transaction_to_be_refunded",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c8facd63-9996-4b56-903f-e936203aff0d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check that the transaction id is created\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(true);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                  "    pm.environment.set(\"fundingtoberefunded\", jsonData.TransactionID);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "41120fff-d3af-476e-a56e-2cedc235353d",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0fd90eb4-2a38-409b-81c9-f6569753454e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "FirstName",
                  "value": "{{$randomFirstName}}",
                  "type": "text"
                },
                {
                  "key": "LastName",
                  "value": "{{$randomLastName}}",
                  "type": "text"
                },
                {
                  "key": "CompanyName",
                  "value": "{{$randomCompanyName}}",
                  "type": "text"
                },
                {
                  "key": "DOB",
                  "value": "{{dob}}",
                  "type": "text"
                },
                {
                  "key": "PhoneNumber",
                  "value": "{{phonenumber}}",
                  "type": "text"
                },
                {
                  "key": "Address1",
                  "value": "{{$randomStreetAddress}}",
                  "type": "text"
                },
                {
                  "key": "City",
                  "value": "{{$randomCity}}",
                  "type": "text"
                },
                {
                  "key": "Province",
                  "value": "{{province}}",
                  "type": "text"
                },
                {
                  "key": "Country",
                  "value": "{{country}}",
                  "type": "text"
                },
                {
                  "key": "PostalCode",
                  "value": "{{postalcode}}",
                  "type": "text"
                },
                {
                  "key": "AccountNumber",
                  "value": "{{$randomBankAccount}}",
                  "type": "text"
                },
                {
                  "key": "FinancialInstitutionNumber",
                  "value": "{{financial_ins_nbr}}",
                  "type": "text"
                },
                {
                  "key": "BranchTransitNumber",
                  "value": "{{branch_transit_nbr}}",
                  "type": "text"
                },
                {
                  "key": "Amount",
                  "value": "0.60",
                  "type": "text"
                },
                {
                  "key": "Currency",
                  "value": "{{currency_cad}}",
                  "type": "text"
                },
                {
                  "key": "ClientReferenceNumber",
                  "value": "{{$randomPhoneNumber}}",
                  "type": "text"
                },
                {
                  "key": "KYCPerformed",
                  "value": "{{$randomBoolean}}",
                  "type": "text"
                },
                {
                  "key": "KYCReferenceNumber",
                  "value": "{{clientreferencenumber}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{emailaddress}}",
                  "type": "text"
                },
                {
                  "key": "IPAddress",
                  "value": "{{$randomIP}}",
                  "type": "text"
                },
                {
                  "key": "TransactionLabel",
                  "value": "{{$randomProductAdjective}}",
                  "type": "text"
                },
                {
                  "key": "Notes",
                  "value": "{{$randomPhrase}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/eft/fund",
            "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
          },
          "response": []
        },
        {
          "name": "TC_02_create_withdraw_transaction_to_be_refunded",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "76dde21e-df76-44bf-a69e-72d506976d02",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Check that the transaction id is created\", function() {",
                  "    pm.expect(jsonData.Success).is.to.equal(true);",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");",
                  "    pm.environment.set(\"withdrawtoberefunded\", jsonData.TransactionID);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d00a233c-2cdc-4e48-8a96-c59387343f73",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "35972180-9a11-436d-82a4-441394cf8633",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{refundaccountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{refundapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{refundapisignature}}",
                  "type": "text"
                },
                {
                  "key": "FirstName",
                  "value": "{{$randomFirstName}}",
                  "type": "text"
                },
                {
                  "key": "LastName",
                  "value": "{{$randomLastName}}",
                  "type": "text"
                },
                {
                  "key": "CompanyName",
                  "value": "{{$randomCompanyName}}",
                  "type": "text"
                },
                {
                  "key": "DOB",
                  "value": "{{dob}}",
                  "type": "text"
                },
                {
                  "key": "PhoneNumber",
                  "value": "{{phonenumber}}",
                  "type": "text"
                },
                {
                  "key": "Address1",
                  "value": "{{$randomStreetAddress}}",
                  "type": "text"
                },
                {
                  "key": "City",
                  "value": "{{$randomCity}}",
                  "type": "text"
                },
                {
                  "key": "Province",
                  "value": "{{province}}",
                  "type": "text"
                },
                {
                  "key": "Country",
                  "value": "{{country}}",
                  "type": "text"
                },
                {
                  "key": "PostalCode",
                  "value": "{{postalcode}}",
                  "type": "text"
                },
                {
                  "key": "AccountNumber",
                  "value": "{{$randomBankAccount}}",
                  "type": "text"
                },
                {
                  "key": "FinancialInstitutionNumber",
                  "value": "{{financial_ins_nbr}}",
                  "type": "text"
                },
                {
                  "key": "BranchTransitNumber",
                  "value": "{{branch_transit_nbr}}",
                  "type": "text"
                },
                {
                  "key": "Amount",
                  "value": "0.99",
                  "type": "text"
                },
                {
                  "key": "Currency",
                  "value": "{{currency_cad}}",
                  "type": "text"
                },
                {
                  "key": "ClientReferenceNumber",
                  "value": "{{$randomPhoneNumber}}",
                  "type": "text"
                },
                {
                  "key": "KYCPerformed",
                  "value": "{{$randomBoolean}}",
                  "type": "text"
                },
                {
                  "key": "KYCReferenceNumber",
                  "value": "{{$randomInt}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{emailaddress}}",
                  "type": "text"
                },
                {
                  "key": "IPAddress",
                  "value": "{{$randomIP}}",
                  "type": "text"
                },
                {
                  "key": "TransactionLabel",
                  "value": "{{$randomProductAdjective}}",
                  "type": "text"
                },
                {
                  "key": "Notes",
                  "value": "{{$randomPhrase}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/eft/withdraw",
            "description": "If required parameters 'StartDateTime, EndDateTime' are not provided, throws an exception.\n\nQuery String:\nAccountID {required}\nKey {required}\nSignature {required}"
          },
          "response": []
        }
      ],
      "id": "463e33db-1e55-4f20-89bc-a12bb66a5613"
    },
    {
      "name": "POST /account/user",
      "item": [
        {
          "name": "TC_01_add_new_email_user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b8b94ce-ee10-44ed-a6bc-f03f24387ffd",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that a new user is created successfully\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                  "    pm.expect(jsonData.Username).is.not.empty;\r",
                  "    pm.expect(jsonData.Password).is.not.empty;\r",
                  "});\r",
                  "\r",
                  "// Saving the password on an variable\r",
                  "pm.environment.set(\"oldpassword\", jsonData[\"Password\"]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "597e3b9e-1bda-4a68-81fc-f1e40ccfeb1b",
                "exec": [
                  "// Set the random email\r",
                  "var num = Math.floor(Math.random() * 1000000001);\r",
                  "pm.environment.set(\"email\", \"email\" + num + \"@gmail.com\");\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "265cac0c-cba0-42db-b2d8-d88a9bd6a08b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{email}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/user"
          },
          "response": []
        },
        {
          "name": "TC_02_add_same_user_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35f79e9a-30fa-4778-93c9-f7b92f03189f",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it is not possible to add the same user twice\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"User already exists. Please try again\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ec7f3830-52a6-446a-ba0c-e92bf7ac8807",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{email}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/user"
          },
          "response": []
        },
        {
          "name": "TC_03_add_user_not_informing_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3a23172-cb69-4411-8b49-e3ac6e251f16",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it is not possible to add a user without informing a email address\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: EmailAddress\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "d0030612-9bbf-4d51-814d-f49efb717df0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/user"
          },
          "response": []
        },
        {
          "name": "TC_04_add_user_informing_empty_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50d732f9-f229-48a8-a8e1-75b1f4c0055b",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it is not possible to add a user without informing a email address\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: EmailAddress\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a20c71fc-04df-446e-a730-5aaa68633795",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/user"
          },
          "response": []
        },
        {
          "name": "TC_05_add_new_user_invalid_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2013bb5a-b5c7-4527-ac6a-574e89364548",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify thatit's not possible to add a new user if the email informed is invalid.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): EmailAddress (A valid email address is required)\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5433032f-c45b-4b5e-a778-a0550850c8bc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "testqavopay.com",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/user"
          },
          "response": []
        },
        {
          "name": "TC_06_add_new_user_email_special_charactes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39793330-3ed9-4769-89f7-049cdb246ecf",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify thatit's not possible to add a new user if the email informed has special characters.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): EmailAddress (A valid email address is required)\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e89a7587-1bfc-44d5-a123-2f3b247a272c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "$^#&%*%^#(^",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/user"
          },
          "response": []
        },
        {
          "name": "TC_07_account_not_enabled_add_new_user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "050811e3-806a-4948-b3f3-1e728c2042fb",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that the specific account cannot add users.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"This account cannot add users.\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a7f26648-500b-493c-93db-7bad7621df94",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5bbfb238-4a2d-45b2-8d44-0c00893b7ddd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{vopayaccountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{vpaccountidkey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{vpaccountidsig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{email}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/user"
          },
          "response": []
        }
      ],
      "id": "73c870d5-ee42-443b-b607-dd9790b27575"
    },
    {
      "name": "POST /account/users/change-password",
      "item": [
        {
          "name": "TC_01_change_password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df081d51-bf30-4e61-bad0-196aa15c1f6b",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that a new user's password is created successfully\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                  "    pm.expect(jsonData.Username).is.not.empty;\r",
                  "    pm.expect(jsonData.Password).is.to.equal(\"Test12345\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "23d76503-925a-4bab-8897-652def933867",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{email}}",
                  "type": "text"
                },
                {
                  "key": "NewPassword",
                  "value": "Test12345",
                  "type": "text"
                },
                {
                  "key": "SendEmail",
                  "value": "{{$randomBoolean}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/change-password"
          },
          "response": []
        },
        {
          "name": "TC_02_invalid_email_informed",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f8e3950-d5a2-4d6e-b29a-e1426f0418d2",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that the user email informed does not exist.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): EmailAddress (A valid email address is required)\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "952673c7-767c-4e30-80b5-c84128ab94a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "testsgmail.com",
                  "type": "text"
                },
                {
                  "key": "OldPassword",
                  "value": "{{oldpassword}}",
                  "type": "text"
                },
                {
                  "key": "NewPassword",
                  "value": "Test12345",
                  "type": "text"
                },
                {
                  "key": "SendEmail",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/change-password"
          },
          "response": []
        },
        {
          "name": "TC_03_not_informing_new_password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b373e39a-c0dd-49d5-8cad-9a45e623fe34",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that one of the required fields is not informed.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: NewPassword\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "94a909ae-c1a7-4a7f-8856-869b96a70b59",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{email}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/change-password"
          },
          "response": []
        },
        {
          "name": "TC_04_user_email_does_not_exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3136e20-c313-4bcf-8793-345932562665",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that the user email informed does not exist.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"This user does not exist, please try again.\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "71068adf-c33b-444b-a3bc-8a1ff9ab87e8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "tests@gmail.com",
                  "type": "text"
                },
                {
                  "key": "NewPassword",
                  "value": "Test12345",
                  "type": "text"
                },
                {
                  "key": "SendEmail",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/change-password"
          },
          "response": []
        },
        {
          "name": "TC_05_not_informing_any_required_field",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b90f0ca9-2d6b-4ce3-a9ea-91e0fef251c3",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that none of the required fields were informed.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: EmailAddress, NewPassword\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "7a12241b-38e1-4da5-b2e5-be5dbd57c569",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/change-password"
          },
          "response": []
        },
        {
          "name": "TC_06_not_informing_an_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "205a50f0-d210-4c10-bbd8-f3d978a1ad13",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that one of the required fields is not informed.\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: EmailAddress\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "11c56eeb-d23f-4bb4-8d8a-338e9bb3e735",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "OldPassword",
                  "value": "{{oldpassword}}",
                  "type": "text"
                },
                {
                  "key": "NewPassword",
                  "value": "Test12345",
                  "type": "text"
                },
                {
                  "key": "SendEmail",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/change-password"
          },
          "response": []
        }
      ],
      "id": "cb2446fa-2af4-4cc6-926f-d8dfa8cadf5c"
    },
    {
      "name": "GET /account/users",
      "item": [
        {
          "name": "TC_01_get_users_from_one_account",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f33f080-118c-4b06-bc95-14885bb22500",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that users for one account are returned successfully\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "99dbe880-1f0d-4532-9611-66c0a3cf41dc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}api/v2/account/users?AccountID={{accountid}}&Key={{accountapikey}}&Signature={{accountapisig}}",
              "host": [
                "{{url}}api"
              ],
              "path": [
                "v2",
                "account",
                "users"
              ],
              "query": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "id": "b9038d76-81b9-47fb-9318-a970fce56d49"
    },
    {
      "name": "POST /account/users/delete",
      "item": [
        {
          "name": "TC_01_delete_user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b56c472-e912-4551-ba26-10db19886c46",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that user email is deleted successfully\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(true);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"\");\r",
                  "    pm.expect(jsonData.IsActive).is.to.equal(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c0a61829-b780-4fb3-bc76-f0b994b13fc3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{email}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/delete"
          },
          "response": []
        },
        {
          "name": "TC_02_delete_same_user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce88736a-7f4d-4283-9b42-89f6edcc13f8",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it's not possible to delete the same user email twice\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"This user does not exist, please try again.\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "6df39a0b-c1e5-4f04-9a3e-8eeec75228df",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "{{email}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/delete"
          },
          "response": []
        },
        {
          "name": "TC_03_delete_user_not_informing_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4d4fc6d-da82-4a1d-8632-7ef89d78b3f5",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it's necessary to inform the email to delete one user\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: EmailAddress\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "63c2a25d-3c1d-4a6c-849e-178a065dd5a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/delete"
          },
          "response": []
        },
        {
          "name": "TC_04_delete_user_informing_empty_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca1bad1c-087a-4b81-8afd-ca7c139cbec1",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it's necessary to inform the email to delete one user\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Required parameter(s) missing: EmailAddress\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "2a96234c-3764-41d6-adef-a90cba7ae89d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/delete"
          },
          "response": []
        },
        {
          "name": "TC_05_delete_user_informing_inexistent _email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74c1499d-d96a-4e87-a92e-dfd6eb7de110",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it's necessary to inform the email to delete one user\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"This user does not exist, please try again.\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "d56f2cdb-f514-4f54-bcde-69351f6412bc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "test@test.com",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/delete"
          },
          "response": []
        },
        {
          "name": "TC_06_delete_user_informing_invalid_email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07a2be99-3636-4d79-94af-4d483671ef4a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Verify that it's necessary to inform the email to delete one user\", function() {\r",
                  "    pm.expect(jsonData.Success).is.to.equal(false);\r",
                  "    pm.expect(jsonData.ErrorMessage).is.to.equal(\"Invalid Parameter(s): EmailAddress (A valid email address is required)\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5ede5f53-41f7-4c39-b358-a6511b87b69f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "AccountID",
                  "value": "{{accountid}}",
                  "type": "text"
                },
                {
                  "key": "Key",
                  "value": "{{accountapikey}}",
                  "type": "text"
                },
                {
                  "key": "Signature",
                  "value": "{{accountapisig}}",
                  "type": "text"
                },
                {
                  "key": "EmailAddress",
                  "value": "testsgmail.com",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}api/v2/account/users/delete"
          },
          "response": []
        }
      ],
      "id": "b4796676-dae4-4324-aba5-c86159eea2ad"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "2293076f-fd4b-4c22-a729-261b06f5e9f3",
        "type": "text/javascript",
        "exec": [
          "var _ = require('lodash');",
          "",
          "// Function to return the correct date format. ",
          "function returnDate() {",
          "\tvar today = new Date();",
          "    var dd = today.getDate();",
          "    var mm = today.getMonth() + 1; ",
          "    var yyyy = today.getFullYear();",
          "    ",
          "    if (dd < 10) {",
          "        dd = '0' + dd;",
          "    } ",
          "",
          "    if (mm < 10) {",
          "        mm = '0' + mm;",
          "    } ",
          "    ",
          "    return yyyy + '-' + mm + '-' + dd;  ",
          "}",
          "",
          "// generate the Signature. ",
          "function returnSignature(a_Key, a_ApiSharedSecret) {",
          "   var Signature = '';",
          "   var Key = '';",
          "   var shareSecret = '';",
          "   var CurrentDate = returnDate();",
          "   ",
          "   if (a_Key) {",
          "       Key = a_Key;",
          "   } ",
          "   ",
          "   if (a_ApiSharedSecret) {",
          "       shareSecret = a_ApiSharedSecret;",
          "   }",
          "   ",
          "   return CryptoJS.SHA1(Key + shareSecret + CurrentDate).toString();",
          "}",
          "",
          "// Setting the Signature for the main user.",
          "pm.environment.set('accountapisig', returnSignature(pm.environment.get('accountapikey'), pm.environment.get('accountsharedsecret')));",
          "",
          "// Setting the Signature for the sub account user.",
          "pm.environment.set('subaccountapisig', returnSignature(pm.environment.get('subaccountapikey'), pm.environment.get('subaccountsharedsecret')));",
          "",
          "// Setting the Signature for the vopay account user.",
          "pm.environment.set('vpaccountidsig', returnSignature(pm.environment.get('vpaccountidkey'), pm.environment.get('vpaccountid_sharedsecretkey')));",
          "",
          "// Setting the Signature for the sub account user. This sub account is not Clients Account enabled",
          "pm.environment.set('vopaysubaccountapisig', returnSignature(pm.environment.get('vopaysubaccountapikey'), pm.environment.get('vopaysubaccountsharedsecret')));",
          "",
          "let letters = _.times(3, () => _.sample('ABCEGHJKLMNPRSTVXY'));",
          "let numbers = _.times(3, () => _.sample('0123456789'));",
          "",
          "var postalCode = _.flatten(_.zip(letters,numbers));",
          "postalCode.splice(3,false,' ');",
          "// Set canadian provinces",
          "const arr_provinces = [\"BC\", \"PE\", \"NS\", \"QC\", \"MB\", \"SK\", \"AB\", \"ON\", \"NB\", \"YT\", \"NT\", \"NU\", \"PQ\"];",
          "pm.environment.set(\"province\", arr_provinces[_.random(0,12)]);",
          "pm.environment.set('randomamount',_.random(Number.MAX_SAFE_INTEGER)/100);",
          "pm.environment.set('randomfirstname',pm.variables.replaceIn('{{$randomFirstName}}'));",
          "pm.environment.set('randomlastname',pm.variables.replaceIn('{{$randomLastName}}'));",
          "pm.environment.set('randomphonenumber',pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
          "pm.environment.set('randomaddress',pm.variables.replaceIn('{{$randomStreetAddress}}'));",
          "pm.environment.set('randomcity',pm.variables.replaceIn('{{$randomCity}}'));",
          "pm.environment.set('randompostalcode',_.join(postalCode,''));",
          "",
          "// Setting the Signature for the refund account user. This account is not Clients Account enabled",
          "pm.environment.set('refundapisignature', returnSignature(pm.environment.get('refundapikey'), pm.environment.get('refundapisharedsecret')));",
          "",
          "/**",
          " * Checks if we are running in AWS. This is useful for reducing console output in Postman monitor. https://learning.postman.com/docs/monitoring-your-api/faqs-monitors/#where-do-monitors-run",
          " * @function in_aws",
          " * @return {Boolean}       True iff running on AWS server; False otherwise.",
          " */",
          "async function in_aws(){",
          "    let ip_addr,",
          "    in_aws = false;",
          "",
          "    pm.sendRequest(\"http://api.ipify.org\", (err,res) => {",
          "        if(err){",
          "            console.log(\"While trying to get IP address, got error: \" + err.message);",
          "        } else {",
          "            ip_addr = res;",
          "        }",
          "    });",
          "",
          "    const aws_ip_ranges = \"https://ip-ranges.amazonaws.com/ip-ranges.json\";",
          "    // check if ip is in aws ip ranges",
          "    pm.sendRequest(aws_ip_ranges, (err,res) => {",
          "        if(err){",
          "            console.log(\"While trying to get AWS IP ranges, got error: \" + err.message);",
          "        } else {",
          "            const aws_ip_ranges = JSON.parse(res);",
          "            for(let i = 0; i < aws_ip_ranges.prefixes.length; i++){",
          "                if(ip_addr.includes(aws_ip_ranges.prefixes[i].ip_prefix)){",
          "                    in_aws = true;",
          "                    break;",
          "                }",
          "            }",
          "        }",
          "    });",
          "    return in_aws;",
          "}",
          "",
          "Object.prototype.in_aws = in_aws; //When defined at a collection level, this makes in_aws available to all down-script contexts. https://stackoverflow.com/a/68998344/1757756",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "cdab5739-01df-4552-bef9-ebe9443639bb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}